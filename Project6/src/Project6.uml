<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_HwJmIJYTEe6D79QHmq15EA" name="Project6">
    <eAnnotations xmi:id="_H2cbYJYTEe6D79QHmq15EA" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_H2cbYZYTEe6D79QHmq15EA" source="codegen">
        <details xmi:id="_H2cbYpYTEe6D79QHmq15EA" key="codegenDirectory" value="/Project6/src"/>
        <details xmi:id="_IeLJwJYTEe6D79QHmq15EA" key="AssociatedSourceCode" value="/Project6/src/DriverFX.java;766326947/1;/Project6/src/FXMainPane.java;1735909902/1;/Project6/src/Graph.java;3130587120/1;/Project6/src/GraphInterface.java;1343001921/1;/Project6/src/GraphTest.java;1715611698/1;/Project6/src/Graph_GFA_Test.java;707821358/1;/Project6/src/Graph_STUDENT_Test.java;2812567817/1;/Project6/src/Road.java;2260766991/1;/Project6/src/Road_STUDENT_Test.java;1116728225/1;/Project6/src/Town.java;1153332970/1;/Project6/src/TownGraphManager.java;2558587907/1;/Project6/src/TownGraphManagerInterface.java;3808394823/1;/Project6/src/TownGraphManagerTest.java;1361487325/1;/Project6/src/TownGraphManager_GFA_Test.java;3941608769/1;/Project6/src/TownGraphManager_STUDENT_Test.java;2807919844/1;/Project6/src/Town_STUDENT_Test.java;1422392527/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_IHTh4JYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_IHTh4ZYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_IHTh4pYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_IHTh45YTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_IHTh5JYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_IHTh5ZYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_IHTh5pYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_IHTh55YTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_IHUI8JYTEe6D79QHmq15EA">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_IFZdYJYTEe6D79QHmq15EA" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_IFZdYZYTEe6D79QHmq15EA" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_INGA0JYTEe6D79QHmq15EA" name="IOException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_INK5UJYTEe6D79QHmq15EA" name="File"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_INLgYZYTEe6D79QHmq15EA" name="FileNotFoundException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_IFargJYTEe6D79QHmq15EA" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_INMHcJYTEe6D79QHmq15EA" name="ArrayList"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_INlwEZYTEe6D79QHmq15EA" name="Arrays"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_INm-MZYTEe6D79QHmq15EA" name="Collections"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_INnlQZYTEe6D79QHmq15EA" name="Iterator"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_INozYJYTEe6D79QHmq15EA" name="Set"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_IN1AoJYTEe6D79QHmq15EA" name="Scanner"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_IOJwwJYTEe6D79QHmq15EA" name="E"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_IOKX0JYTEe6D79QHmq15EA" name="V"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_IOBN4JYTEe6D79QHmq15EA" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_IOB08JYTEe6D79QHmq15EA" name="Exception"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_IOS6sJYTEe6D79QHmq15EA" name="Comparable"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_IOUv4JYTEe6D79QHmq15EA" name="Object"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_IFZdYpYTEe6D79QHmq15EA" name="javafx">
      <packagedElement xmi:type="uml:Package" xmi:id="_IFZdY5YTEe6D79QHmq15EA" name="application">
        <packagedElement xmi:type="uml:Class" xmi:id="_INHO8JYTEe6D79QHmq15EA" name="Application"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_INMugZYTEe6D79QHmq15EA" name="Platform"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_IFZdZJYTEe6D79QHmq15EA" name="scene">
        <packagedElement xmi:type="uml:Package" xmi:id="_IFargpYTEe6D79QHmq15EA" name="control">
          <packagedElement xmi:type="uml:Package" xmi:id="_IFarg5YTEe6D79QHmq15EA" name="Alert">
            <packagedElement xmi:type="uml:Enumeration" xmi:id="_INSOEJYTEe6D79QHmq15EA" name="AlertType"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_INOjsJYTEe6D79QHmq15EA" name="Alert"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_INOjspYTEe6D79QHmq15EA" name="Button"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_INPKwZYTEe6D79QHmq15EA" name="ComboBox"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_INPx0ZYTEe6D79QHmq15EA" name="Label"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_INQY4ZYTEe6D79QHmq15EA" name="TextArea"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_INQ_8ZYTEe6D79QHmq15EA" name="TextField"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_IFarhJYTEe6D79QHmq15EA" name="layout">
          <packagedElement xmi:type="uml:Class" xmi:id="_INS1IZYTEe6D79QHmq15EA" name="HBox"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_INTcMJYTEe6D79QHmq15EA" name="VBox"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_INH2AZYTEe6D79QHmq15EA" name="Scene"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_IFZdZZYTEe6D79QHmq15EA" name="stage">
        <packagedElement xmi:type="uml:Class" xmi:id="_INJEIZYTEe6D79QHmq15EA" name="Stage"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_INTcMpYTEe6D79QHmq15EA" name="FileChooser"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_IFargZYTEe6D79QHmq15EA" name="geometry">
        <packagedElement xmi:type="uml:Class" xmi:id="_INNVkZYTEe6D79QHmq15EA" name="Insets"/>
        <packagedElement xmi:type="uml:Enumeration" xmi:id="_INN8oZYTEe6D79QHmq15EA" name="Pos"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_IF0UIJYTEe6D79QHmq15EA" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_IF07MJYTEe6D79QHmq15EA" name="junit">
        <packagedElement xmi:type="uml:Class" xmi:id="_INlJAJYTEe6D79QHmq15EA" name="Assert"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_INpacJYTEe6D79QHmq15EA" name="After"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_INqBgJYTEe6D79QHmq15EA" name="Before"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_INqBgpYTEe6D79QHmq15EA" name="Test"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IHSTwJYTEe6D79QHmq15EA" name="DriverFX">
      <generalization xmi:id="_IOERMpYTEe6D79QHmq15EA" general="_INHO8JYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO9pEJYTEe6D79QHmq15EA" name="main" specification="_IHUI8ZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IO9pEZYTEe6D79QHmq15EA" name="args">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IO9pEpYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
        <language>java</language>
        <body>launch(args);   
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO9pE5YTEe6D79QHmq15EA" name="start" specification="_IOB08pYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IO9pFJYTEe6D79QHmq15EA" name="stage" type="_INJEIZYTEe6D79QHmq15EA"/>
        <language>java</language>
        <body>FXMainPane root = new FXMainPane();
		//  set the scene to hold root
		stage.setScene(new Scene(root, 600,700));
		//set stage title
		stage.setTitle(&quot;Travelling Student&quot;);
		//display the stage
		stage.show();
	
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IHUI8ZYTEe6D79QHmq15EA" name="main" isStatic="true" method="_IO9pEJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IHUI8pYTEe6D79QHmq15EA" name="args">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IHUwAJYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOB08pYTEe6D79QHmq15EA" name="start" method="_IO9pE5YTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IOCcAJYTEe6D79QHmq15EA" name="stage" type="_INJEIZYTEe6D79QHmq15EA"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IHV-IJYTEe6D79QHmq15EA" name="FXMainPane">
      <generalization xmi:id="_IOGtcJYTEe6D79QHmq15EA" general="_INTcMJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOfvAJYTEe6D79QHmq15EA" name="addTownLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IPi34JYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOg9IJYTEe6D79QHmq15EA" name="addTownVBox" visibility="package" type="_INTcMJYTEe6D79QHmq15EA" association="_IPje8ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOhkMZYTEe6D79QHmq15EA" name="addTownHBox" visibility="package" type="_INS1IZYTEe6D79QHmq15EA" association="_IPkGAZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOiLQJYTEe6D79QHmq15EA" name="addTownButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IPkGBJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOjZYJYTEe6D79QHmq15EA" name="displayTownsButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IPktEZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOkAcZYTEe6D79QHmq15EA" name="addTownTextField" visibility="package" type="_INQ_8ZYTEe6D79QHmq15EA" association="_IPlUIZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOkngpYTEe6D79QHmq15EA" name="findConnectionTextArea" visibility="package" type="_INQY4ZYTEe6D79QHmq15EA" association="_IPl7MJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOl1oJYTEe6D79QHmq15EA" name="addSourceTownComboBox" visibility="package" type="_INPKwZYTEe6D79QHmq15EA" association="_IPl7M5YTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOnDwZYTEe6D79QHmq15EA" name="inset" visibility="package" type="_INNVkZYTEe6D79QHmq15EA" association="_IPmiQZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOnq0ZYTEe6D79QHmq15EA" name="graph" visibility="package" type="_IIl7UJYTEe6D79QHmq15EA" association="_IPnJUZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOnq05YTEe6D79QHmq15EA" name="alert" visibility="private" type="_INOjsJYTEe6D79QHmq15EA" association="_IPnwYJYTEe6D79QHmq15EA">
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_IOnq1JYTEe6D79QHmq15EA" value="new Alert(AlertType.INFORMATION)"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IPOHwJYTEe6D79QHmq15EA" name="townNameLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IPyvhJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPOu0pYTEe6D79QHmq15EA" name="addRoadLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IPzWkZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPPV4ZYTEe6D79QHmq15EA" name="roadNameLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IPz9oZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPPV5JYTEe6D79QHmq15EA" name="selectTownsForRoadLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IP0ksJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPPV55YTEe6D79QHmq15EA" name="findConnectionLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IP0ks5YTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPP88pYTEe6D79QHmq15EA" name="findConnectionFromLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IP1LwZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPP89ZYTEe6D79QHmq15EA" name="toLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IP1y0ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPQkAJYTEe6D79QHmq15EA" name="distLabel" visibility="package" type="_INPx0ZYTEe6D79QHmq15EA" association="_IP2Z4ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPQkA5YTEe6D79QHmq15EA" name="addRoadVBox" visibility="package" type="_INTcMJYTEe6D79QHmq15EA" association="_IP3A8ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPRLEpYTEe6D79QHmq15EA" name="findConnectionVBox" visibility="package" type="_INTcMJYTEe6D79QHmq15EA" association="_IP3oAZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPRLFZYTEe6D79QHmq15EA" name="bottomVBox" visibility="package" type="_INTcMJYTEe6D79QHmq15EA" association="_IP4PEZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPRyIZYTEe6D79QHmq15EA" name="addRoadNameHBox" visibility="package" type="_INS1IZYTEe6D79QHmq15EA" association="_IP42IZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPRyJJYTEe6D79QHmq15EA" name="addRoadHBox" visibility="package" type="_INS1IZYTEe6D79QHmq15EA" association="_IP42JJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPSZMJYTEe6D79QHmq15EA" name="addRoadTownsHBox" visibility="package" type="_INS1IZYTEe6D79QHmq15EA" association="_IP5dMZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPSZM5YTEe6D79QHmq15EA" name="findConnectionHBox" visibility="package" type="_INS1IZYTEe6D79QHmq15EA" association="_IP6EQZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPSZNpYTEe6D79QHmq15EA" name="bottomHBox" visibility="package" type="_INS1IZYTEe6D79QHmq15EA" association="_IP6ERJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPTAQpYTEe6D79QHmq15EA" name="addRoadButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IP6rUZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPTnUpYTEe6D79QHmq15EA" name="findConnectionButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IP7SYZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPTnVZYTEe6D79QHmq15EA" name="readFileButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IP75cZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPUOYpYTEe6D79QHmq15EA" name="exitButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IP75dJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPUOZZYTEe6D79QHmq15EA" name="displayRoadsButton" visibility="package" type="_INOjspYTEe6D79QHmq15EA" association="_IP8ggZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPU1cZYTEe6D79QHmq15EA" name="addRoadTextField" visibility="package" type="_INQ_8ZYTEe6D79QHmq15EA" association="_IP9HkZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPU1dJYTEe6D79QHmq15EA" name="specifyDistanceTextField" visibility="package" type="_INQ_8ZYTEe6D79QHmq15EA" association="_IP9HlJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPVcgpYTEe6D79QHmq15EA" name="displayTowns" visibility="package" type="_INQY4ZYTEe6D79QHmq15EA" association="_IP9uoZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPVchZYTEe6D79QHmq15EA" name="displayRoads" visibility="package" type="_INQY4ZYTEe6D79QHmq15EA" association="_IP-VsZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPWDkpYTEe6D79QHmq15EA" name="addDestTownComboBox" visibility="package" type="_INPKwZYTEe6D79QHmq15EA" association="_IP-8wJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPWDlZYTEe6D79QHmq15EA" name="sourceConnectionComboBox" visibility="package" type="_INPKwZYTEe6D79QHmq15EA" association="_IP_j0ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPWqopYTEe6D79QHmq15EA" name="destConnectionComboBox" visibility="package" type="_INPKwZYTEe6D79QHmq15EA" association="_IQAK4JYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPXRsJYTEe6D79QHmq15EA" name="inset2" visibility="package" type="_INNVkZYTEe6D79QHmq15EA" association="_IQAx8ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IPXRs5YTEe6D79QHmq15EA" name="inset3" visibility="package" type="_INNVkZYTEe6D79QHmq15EA" association="_IQBZAZYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO-QIJYTEe6D79QHmq15EA" name="FXMainPane" specification="_IHYaYJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IO-QIZYTEe6D79QHmq15EA" type="_IHV-IJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>//TownGraphManager object
		graph = new TownGraphManager();
		//set up margins
		inset = new Insets(10);
		
		
		//add-town components
		addTownLabel = new Label(&quot;Add Town&quot;);
		addTownLabel.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold&quot;);
		townNameLabel = new Label(&quot;Town Name: &quot;);
		
		addTownTextField = new TextField();
		addTownTextField.setPrefColumnCount(10);
		
		displayTowns = new TextArea();
		
		addTownButton = new Button(&quot;Add Town&quot;);
		displayTownsButton = new Button(&quot;Display Towns&quot;);
		
		//HBox and VBox for add town area
		addTownHBox = new HBox();
		addTownHBox.getChildren().addAll(townNameLabel, addTownTextField, addTownButton);
		addTownVBox = new VBox();

		VBox.setMargin(addTownLabel, inset);
	    HBox.setMargin(townNameLabel, inset);
	    VBox.setMargin(addTownHBox, inset);
	    HBox.setMargin(addTownLabel, inset);
	    HBox.setMargin(addTownButton, inset);
	    
	    addTownHBox.setAlignment(Pos.CENTER);
	    addTownVBox.setAlignment(Pos.CENTER);
	    setAlignment(Pos.CENTER);
		
		addTownVBox.getChildren().addAll(addTownLabel, addTownHBox);
		addTownVBox.setStyle(&quot;-fx-border-color: gray;&quot;);
		addTownVBox.setPrefWidth(400);

		//VBox for the display Towns area
		VBox displayTownVBox = new VBox();
		displayTownVBox.setAlignment(Pos.CENTER);
		displayTownVBox.setStyle(&quot;-fx-border-color: gray;&quot;);
		displayTownVBox.setPrefWidth(200);
		displayTownVBox.getChildren().addAll(displayTowns, displayTownsButton);
		VBox.setMargin(displayTownsButton, inset);
		VBox.setMargin(displayTowns, inset);
		
		HBox addTown = new HBox();
		addTown.setAlignment(Pos.CENTER);
		addTown.getChildren().addAll(addTownVBox, displayTownVBox);

		//add-road area components
		addRoadLabel = new Label(&quot;Add Road&quot;);
		addRoadLabel.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold&quot;);
		roadNameLabel = new Label(&quot;Road Name: &quot;);
		selectTownsForRoadLabel = new Label(&quot;Select Towns the Road Connects&quot;);
		distLabel = new Label(&quot;Distance&quot;);
		
		displayRoads = new TextArea();

		//ComboBoxes of all towns
		addSourceTownComboBox = new ComboBox&lt;String>();
		addDestTownComboBox = new ComboBox&lt;String>();

		displayRoadsButton = new Button(&quot;Display Roads&quot;);
		addRoadButton = new Button(&quot;Add Road&quot;);

		addRoadTextField = new TextField();
		addRoadTextField.setPrefColumnCount(10);
		specifyDistanceTextField = new TextField();
		specifyDistanceTextField.setPrefColumnCount(10);

		//HBoxes and VBoxes to put Add Road area together
		addRoadHBox = new HBox();
		addRoadHBox.getChildren().addAll(roadNameLabel, addRoadTextField);
		addRoadHBox.setAlignment(Pos.CENTER);
		
		addRoadTownsHBox = new HBox();
	    HBox.setMargin(addSourceTownComboBox, inset);
	    HBox.setMargin(addDestTownComboBox, inset);
	    HBox.setMargin(distLabel, inset);
	    HBox.setMargin(specifyDistanceTextField, inset);
	    HBox.setMargin(addRoadButton, inset);

	    HBox addRoadTownsHBox2 = new HBox();
	    addRoadTownsHBox2.getChildren().addAll(distLabel, specifyDistanceTextField);
	    addRoadTownsHBox2.setAlignment(Pos.CENTER);

		addRoadTownsHBox.getChildren().addAll(addSourceTownComboBox, addDestTownComboBox);
		addRoadTownsHBox.setAlignment(Pos.CENTER);
		
		addRoadVBox = new VBox();
		addRoadVBox.setAlignment(Pos.CENTER);
		addRoadVBox.getChildren().addAll(addRoadLabel, addRoadHBox, selectTownsForRoadLabel,addRoadTownsHBox,addRoadTownsHBox2,addRoadButton);
		addRoadVBox.setAlignment(Pos.CENTER);
		addRoadVBox.setPrefWidth(400);
		VBox.setMargin(addRoadButton, inset);

		addRoadVBox.setStyle(&quot;-fx-border-color: gray;&quot;);
		
		//HBoxes and VBoxes for displaying all roads
		VBox displayRoadVBox = new VBox();
		displayRoadVBox.setAlignment(Pos.CENTER);
		displayRoadVBox.setStyle(&quot;-fx-border-color: gray;&quot;);
		displayRoadVBox.setPrefWidth(200);
		displayRoadVBox.getChildren().addAll(displayRoads, displayRoadsButton);
		VBox.setMargin(displayRoadsButton, inset);
		VBox.setMargin(displayRoads, inset);

		HBox addRoad = new HBox();
		addRoad.setAlignment(Pos.CENTER);
		addRoad.getChildren().addAll(addRoadVBox, displayRoadVBox);

		VBox.setMargin(addRoadLabel, inset);
		VBox.setMargin(addRoadHBox, inset);
		VBox.setMargin(selectTownsForRoadLabel, inset);
		HBox.setMargin(roadNameLabel, inset);
		HBox.setMargin(addRoadTextField, inset);
		HBox.setMargin(addRoadTownsHBox, inset);
		HBox.setMargin(addRoadTownsHBox2, inset);

	    
		//find connection area components
	    sourceConnectionComboBox = new ComboBox&lt;String>();
	    destConnectionComboBox = new ComboBox&lt;String>();

	    findConnectionLabel = new Label(&quot;Find Connection&quot;);
	    findConnectionLabel.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold&quot;);
	    findConnectionFromLabel = new Label(&quot;Find connection from &quot;);
		toLabel = new Label(&quot;to&quot;);

		findConnectionTextArea = new TextArea();
		
		findConnectionButton = new Button(&quot;Find Connection&quot;);
		
		//HBoxes and VBoxes for the Find Connection area
		findConnectionVBox = new VBox();
		findConnectionHBox = new HBox();
		findConnectionHBox.getChildren().addAll(findConnectionFromLabel, sourceConnectionComboBox, toLabel, destConnectionComboBox, findConnectionButton);
		findConnectionVBox.getChildren().addAll(findConnectionLabel, findConnectionHBox, findConnectionTextArea);
		findConnectionVBox.setStyle(&quot;-fx-border-color: gray;&quot;);
		VBox.setMargin(findConnectionTextArea, inset);

		VBox.setMargin(findConnectionHBox, inset);
	    VBox.setMargin(findConnectionLabel, inset);
	    HBox.setMargin(findConnectionFromLabel, inset);
	    HBox.setMargin(sourceConnectionComboBox, inset);
	    HBox.setMargin(toLabel, inset);
	    HBox.setMargin(destConnectionComboBox, inset);
	    HBox.setMargin(findConnectionButton, inset);

	    findConnectionHBox.setAlignment(Pos.CENTER);
	    findConnectionVBox.setAlignment(Pos.CENTER);
		
	    //bottom button area components
	    bottomHBox = new HBox();
		readFileButton = new Button(&quot;Read File&quot;);
		exitButton =new Button(&quot;Exit&quot;);

		bottomVBox = new VBox();
		bottomVBox.getChildren().addAll(bottomHBox);
		bottomVBox.setStyle(&quot;-fx-border-color: gray;&quot;);

		bottomHBox.getChildren().addAll(readFileButton, exitButton);
		
		bottomHBox.setAlignment(Pos.CENTER);

		VBox.setMargin(bottomHBox,inset);
	    HBox.setMargin(readFileButton, inset);
	    HBox.setMargin(exitButton, inset);

		getChildren().addAll(addTown, addRoad, findConnectionVBox, bottomHBox);
		
		//event handling for buttons
		displayTownsButton.setOnAction(event -> {
			ArrayList&lt;String> towns = graph.allTowns();
			String result = &quot;&quot;;
			for(String element : towns)
			{
				result += element+&quot;\n&quot;;
			}
			displayTowns.setText(result);
		});
		displayRoadsButton.setOnAction(event -> {
			ArrayList&lt;String> roads = graph.allRoads();
			String result = &quot;&quot;;
			for(String element : roads)
			{
				result += element+&quot;\n&quot;;
			}
			displayRoads.setText(result);
		});
		addRoadButton.setOnAction(event -> {
			Town town1;
			Town town2;
			try {
				town1 = graph.getTown(addSourceTownComboBox.getValue().toString());
				town2 = graph.getTown(addDestTownComboBox.getValue().toString());
			} catch (NullPointerException e) {
				town1 = town2 = null;
			}
			String name = addRoadTextField.getText();
			String strWeight = specifyDistanceTextField.getText();
			int weight = 0;
			try {
				if (!strWeight.equals(&quot;&quot;)) weight = Integer.parseInt(strWeight);
			}
			catch (NumberFormatException e) {
				weight = -1;
			}
			if (weight &lt; 0) {
				alert.setTitle(&quot;Error&quot;);
				alert.setHeaderText(&quot;Distance must be an integer&quot;);
				alert.showAndWait();
			}
			else if (name.equals(&quot;&quot;)) {
				alert.setTitle(&quot;Error&quot;);
				alert.setHeaderText(&quot;Road name cannot be blank&quot;);
				alert.showAndWait();
			}
			else if (town1 !=null &amp;&amp; town2!=null) {
				graph.addRoad(town1.getName(), town2.getName(), weight, name);
				addSourceTownComboBox.setValue(null);
				addDestTownComboBox.setValue(null);
				addRoadTextField.setText(&quot;&quot;);
				specifyDistanceTextField.setText(&quot;&quot;);
			}
			else {
				alert.setTitle(&quot;Error&quot;);
				alert.setHeaderText(&quot;Must select towns&quot;);
				alert.showAndWait();
			}
		});
		addTownButton.setOnAction(event -> {
			String townName = addTownTextField.getText();
			if (townName.equals(&quot;&quot;)) {
				alert.setTitle(&quot;Error&quot;);
				alert.setHeaderText(&quot;Town name cannot be empty&quot;);
				alert.showAndWait();
			}
			else if (graph.addTown(townName)){
				updateComboBoxes();
				addTownTextField.setText(&quot;&quot;);
			}
			else {
				alert.setTitle(&quot;File Error&quot;);
				alert.setHeaderText(&quot;Problem adding town &quot;+townName);
				alert.showAndWait();
			}
		});
		findConnectionButton.setOnAction(event -> {
			Town town1;
			Town town2;
			String result = &quot;&quot;;
			try {
				town1 = graph.getTown(sourceConnectionComboBox.getValue().toString());
				town2 = graph.getTown(destConnectionComboBox.getValue().toString());
			} catch (NullPointerException e) {
				town1 = town2 = null;
			}
			findConnectionTextArea.setText(&quot;&quot;);
			ArrayList&lt;String> path = graph.getPath(town1.getName(), town2.getName());
			if (town1.equals(town2)){
				findConnectionTextArea.appendText(&quot;Select two different towns&quot;);
			}
			else if (path.isEmpty()){
				findConnectionTextArea.appendText(&quot;You can't get there from here&quot;);
			}
			else {
				for (String s : path){
					result+=s+&quot;\n&quot;;
					//findConnectionTextArea.appendText(s);
					findConnectionTextArea.setText(result);
				}
			}
		});
		readFileButton.setOnAction(event -> {
			try {
				readFile();
			} catch (Exception e) {
				e.printStackTrace();
			}
		});
		exitButton.setOnAction(event -> {
    	 	Platform.exit();
    	 	System.exit(0);
		});
			
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO-QIpYTEe6D79QHmq15EA" name="updateComboBoxes" specification="_IHZBcZYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> townList = graph.allTowns();
		for (String town : townList){
			addDestTownComboBox.getItems().clear();
			sourceConnectionComboBox.getItems().clear();
			destConnectionComboBox.getItems().clear();
			addSourceTownComboBox.getItems().clear();
		}
		for (String town : townList){
			addDestTownComboBox.getItems().addAll(town);
			sourceConnectionComboBox.getItems().addAll(town);
			destConnectionComboBox.getItems().addAll(town);
			addSourceTownComboBox.getItems().addAll(town); 
		}	
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO-QI5YTEe6D79QHmq15EA" name="readFile" specification="_IHZogJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>FileChooser chooser = new FileChooser();
		File selectedFile = null;
		try {
			selectedFile = chooser.showOpenDialog(null);
			if(selectedFile != null) {
				graph.populateTownGraph(selectedFile);
				}
			updateComboBoxes();
		} catch (FileNotFoundException e) {
			alert.setTitle(&quot;File Error&quot;);
			alert.setHeaderText(&quot;File not found&quot;);
			alert.showAndWait();
		}
		catch (IOException e) {
			alert.setTitle(&quot;File Error&quot;);
			alert.setHeaderText(&quot;Input error&quot;);
			alert.showAndWait();
		}
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IHYaYJYTEe6D79QHmq15EA" name="FXMainPane" visibility="package" method="_IO-QIJYTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_IHYaYZYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_IHYaYpYTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_IHZBcJYTEe6D79QHmq15EA" type="_IHV-IJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IHZBcZYTEe6D79QHmq15EA" name="updateComboBoxes" method="_IO-QIpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IHZogJYTEe6D79QHmq15EA" name="readFile" method="_IO-QI5YTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IHehAJYTEe6D79QHmq15EA" name="Graph">
      <ownedComment xmi:id="_IPX4wZYTEe6D79QHmq15EA">
        <body>The Graph class implements the GraphInterface.
It represents a graph of vertices (towns) and  edges (roads).
It uses Dijkstra's Shortest Path algorithm to find the shortest path between two towns.
 *
@param &lt;Town>  the vertex
@param &lt;Road>  the edge

@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IOo48JYTEe6D79QHmq15EA" name="towns" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPnwY5YTEe6D79QHmq15EA">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IOpgAJYTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IOpgApYTEe6D79QHmq15EA" name="roads" visibility="private" type="_IIOu8JYTEe6D79QHmq15EA" association="_IPoXcZYTEe6D79QHmq15EA">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IOpgA5YTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IOqHEZYTEe6D79QHmq15EA" name="shortestRoads" visibility="private">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        <qualifier xmi:id="_IOquIJYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IOquIZYTEe6D79QHmq15EA" name="prevTowns" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPo-gZYTEe6D79QHmq15EA">
        <qualifier xmi:id="_IOrVMZYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA"/>
      </ownedAttribute>
      <interfaceRealization xmi:id="_INXGkJYTEe6D79QHmq15EA" client="_IHehAJYTEe6D79QHmq15EA" supplier="_IHquQJYTEe6D79QHmq15EA" contract="_IHquQJYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO_eQJYTEe6D79QHmq15EA" name="Graph" specification="_IHfIEJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IO_eQZYTEe6D79QHmq15EA" type="_IHehAJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>towns = new HashSet&lt;>();
     roads = new HashSet&lt;>();
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO_eQpYTEe6D79QHmq15EA" name="getEdge" specification="_INYUsJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IO_eQ5YTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IO_eRJYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IO_eRZYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>for (Road road : roads) {
         if (road.contains(source) &amp;&amp; road.contains(destination)) {
             return road;
         }
     }
     return null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO_eRpYTEe6D79QHmq15EA" name="addEdge" specification="_INZi0ZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IO_eR5YTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IO_eSJYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IO_eSZYTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO_eSpYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO_eS5YTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>if (!containsVertex(source) || !containsVertex(destination) || distance &lt; 0) {
         throw new IllegalArgumentException(&quot;Invalid parameters&quot;);
     }
     if (source == null || destination == null) {
         throw new NullPointerException(&quot;Source town and destination town cannot be null&quot;);
     }

     Road road = new Road(source, destination, distance, name);
     roads.add(road);
     return road;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAFUJYTEe6D79QHmq15EA" name="addVertex" specification="_INaJ45YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAFUZYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAFUpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>if (town == null) {
         throw new NullPointerException(&quot;Town cannot be null&quot;);
     }

     return towns.add(town);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAFU5YTEe6D79QHmq15EA" name="containsEdge" specification="_INbYAJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAFVJYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAFVZYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAFVpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>return getEdge(source, destination) != null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAFV5YTEe6D79QHmq15EA" name="containsVertex" specification="_INb_E5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAFWJYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAFWZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>return towns.contains(town);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAFWpYTEe6D79QHmq15EA" name="edgeSet" specification="_IHg9QJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAFW5YTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IPAFXJYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
        <language>java</language>
        <body>return roads;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAsYJYTEe6D79QHmq15EA" name="edgesOf" specification="_INdNMpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAsYZYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAsYpYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IPAsY5YTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
        <language>java</language>
        <body>Set&lt;Road> adjRoads = new HashSet&lt;>();
     for (Road road : roads) {
         if (road.contains(town)) {
             adjRoads.add(road);
         }
     }
     return adjRoads;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAsZJYTEe6D79QHmq15EA" name="removeEdge" specification="_INebUpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAsZZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAsZpYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAsZ5YTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPAsaJYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPAsaZYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>Road road = getEdge(source, destination);
     if (road != null &amp;&amp; road.getWeight() == distance &amp;&amp; road.getName().equals(name)) {
         roads.remove(road);
         return road;
     }
     return null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAsapYTEe6D79QHmq15EA" name="removeVertex" specification="_INfpcpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAsa5YTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPAsbJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>if (!containsVertex(town)) {
         return false;
     }
     towns.remove(town);
     Iterator&lt;Road> rIterator = roads.iterator();
     while (rIterator.hasNext()) {
         Road road = rIterator.next();
         if (road.contains(town)) {
             rIterator.remove();
         }
     }
     return true;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAsbZYTEe6D79QHmq15EA" name="vertexSet" specification="_IHjZgJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPAsbpYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IPAsb5YTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
        <language>java</language>
        <body>return towns;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPBTcJYTEe6D79QHmq15EA" name="dijkstraShortestPath" specification="_INgQg5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPBTcZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <language>java</language>
        <body>shortestRoads = new HashMap&lt;>();
 	prevTowns = new HashMap&lt;>();
 	Set&lt;Town> unvisitedTowns = new HashSet&lt;>(towns);
 	
 	// Initialize shortest distances for all towns to infinity
     for (Town town : towns) {
         shortestRoads.put(town, Integer.MAX_VALUE);
     }
     
     // Initialize the distance from sourse town to itself to 0
     shortestRoads.put(source, 0);
     
     while (!unvisitedTowns.isEmpty()) {
     	Town currentTown = null;
         int shortestRoad = Integer.MAX_VALUE;

         // Find the unvisited town with the shortest distance
         for (Town town : unvisitedTowns) {
         	
             int distance = shortestRoads.get(town);
             // Compare distances and update if a shorter distance is found
             if (distance &lt; shortestRoad) {
                 shortestRoad = distance;
                 currentTown = town;
             }
         }
         
         // If there are no reachable towns left, break out of the loop
         if (currentTown == null) {
             break;
         }
         
         // Remove towm from the list of unvisited towns
         unvisitedTowns.remove(currentTown);
         
         // Iterate through roads connected to the current town
         for (Road road : edgesOf(currentTown)) {
         	
         	// Find the adj town
             Town adjTown = road.getDestination().equals(currentTown) ? road.getSource() : road.getDestination();
             
             // Calculate the possible distance to the adj town through the current town
             int possibleDistance = shortestRoads.get(currentTown) + road.getWeight();
             
             // Check if the possible distance is shorter than the current shortest distance
             if (possibleDistance &lt; shortestRoads.get(adjTown)) {
             	
             	// Update shortest distance and set current town as previous town
                 shortestRoads.put(adjTown, possibleDistance);
                 prevTowns.put(adjTown, currentTown);
             }
         }
     }
     
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPBTcpYTEe6D79QHmq15EA" name="shortestPath" specification="_INg3kpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPBTc5YTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPBTdJYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPBTdZYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>dijkstraShortestPath(source);

     ArrayList&lt;String> route = new ArrayList&lt;>();
     Town currentTown = destination;
     
     // If the destination is unreachable, return an empty route
//        if (shortestRoads.get(destination) == Integer.MAX_VALUE) {
//        	System.out.println(destination);
//            return new ArrayList&lt;>(); // Destination is not reachable, return an empty route
//        }

     // Iterate through the prevTowns to build the route
     while (currentTown != null) {
         Town prevTown = prevTowns.get(currentTown);
         Road road = getEdge(prevTown, currentTown);
         if (road != null) {
         	// Add road details to the route
             route.add(prevTown + &quot; via &quot; + road.getName() + &quot; to &quot; + currentTown + &quot; &quot; + road.getWeight() + &quot; mi&quot;);
         }
         currentTown = prevTown;
     }

     // Reverse the route to return it in the correct order
     Collections.reverse(route);
     
     return route;
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IHfIEJYTEe6D79QHmq15EA" name="Graph" method="_IO_eQJYTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_IHfvIJYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_IHfvIZYTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedComment xmi:id="_IPX4wpYTEe6D79QHmq15EA">
          <body>Constructor with no towns or roads.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IHfvIpYTEe6D79QHmq15EA" type="_IHehAJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IHg9QJYTEe6D79QHmq15EA" name="edgeSet" method="_IPAFWpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IHg9QZYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IHg9QpYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IHjZgJYTEe6D79QHmq15EA" name="vertexSet" method="_IPAsbZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IHjZgZYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IHkAkJYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INYUsJYTEe6D79QHmq15EA" name="getEdge" method="_IO_eQpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INYUsZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INYUspYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INY7wJYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INZi0ZYTEe6D79QHmq15EA" name="addEdge" method="_IO_eRpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INZi0pYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INZi05YTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INZi1JYTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INZi1ZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INZi1pYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INaJ45YTEe6D79QHmq15EA" name="addVertex" method="_IPAFUJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INaJ5JYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INaw8JYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INbYAJYTEe6D79QHmq15EA" name="containsEdge" method="_IPAFU5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INbYAZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INbYApYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INbYA5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INb_E5YTEe6D79QHmq15EA" name="containsVertex" method="_IPAFV5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INcmIJYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INcmIZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INdNMpYTEe6D79QHmq15EA" name="edgesOf" method="_IPAsYJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INdNM5YTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INd0QJYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_INd0QZYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INebUpYTEe6D79QHmq15EA" name="removeEdge" method="_IPAsZJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INebU5YTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INebVJYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INfCYJYTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INfCYZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INfCYpYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INfpcpYTEe6D79QHmq15EA" name="removeVertex" method="_IPAsapYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INfpc5YTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INfpdJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INgQg5YTEe6D79QHmq15EA" name="dijkstraShortestPath" method="_IPBTcJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INgQhJYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INg3kpYTEe6D79QHmq15EA" name="shortestPath" method="_IPBTcpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INg3k5YTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INg3lJYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOIioJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_IHquQJYTEe6D79QHmq15EA" name="GraphInterface">
      <ownedComment xmi:id="_IPYf0JYTEe6D79QHmq15EA">
        <body>The root interface in the graph hierarchy. A mathematical graph-theory graph
object G(V,E) contains a set V of vertices and a set
E of edges. Each edge e=(v1,v2) in E connects vertex v1 to vertex v2.
 *
Through generics, a graph can be typed to specific classes for vertices
V and edges E&lt;T>. Such a graph can contain
vertices of type V and all sub-types and Edges of type
E and all sub-types.</body>
      </ownedComment>
      <ownedOperation xmi:id="_IHtKgJYTEe6D79QHmq15EA" name="edgeSet">
        <ownedComment xmi:id="_IPYf1pYTEe6D79QHmq15EA">
          <body>Returns a set of the edges contained in this graph. The set is backed by
     * the graph, so changes to the graph are reflected in the set. If the graph
     * is modified while an iteration over the set is in progress, the results
     * of the iteration are undefined.
     *
     *
     * @return a set of the edges contained in this graph.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IHtxkJYTEe6D79QHmq15EA" type="_IOJwwJYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IHtxkZYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IHu_sJYTEe6D79QHmq15EA" name="vertexSet">
        <ownedComment xmi:id="_IPZG4JYTEe6D79QHmq15EA">
          <body>Returns a set of the vertices contained in this graph. The set is backed
     * by the graph, so changes to the graph are reflected in the set. If the
     * graph is modified while an iteration over the set is in progress, the
     * results of the iteration are undefined.
     *
     *
     * @return a set view of the vertices contained in this graph.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IHu_sZYTEe6D79QHmq15EA" type="_IOKX0JYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IHu_spYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOK-4JYTEe6D79QHmq15EA" name="getEdge">
        <ownedComment xmi:id="_IPYf0ZYTEe6D79QHmq15EA">
          <body>Returns an edge connecting source vertex to target vertex if such
     * vertices and such edge exist in this graph. Otherwise returns
     * null. If any of the specified vertices is null
     * returns null
     *
     * In undirected graphs, the returned edge may have its source and target
     * vertices in the opposite order.
     *
     * @param sourceVertex source vertex of the edge.
     * @param destinationVertex target vertex of the edge.
     *
     * @return an edge connecting source vertex to target vertex.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOK-4ZYTEe6D79QHmq15EA" name="sourceVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOK-4pYTEe6D79QHmq15EA" name="destinationVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOK-45YTEe6D79QHmq15EA" type="_IOJwwJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IOLl8JYTEe6D79QHmq15EA" name="addEdge">
        <ownedComment xmi:id="_IPYf0pYTEe6D79QHmq15EA">
          <body>Creates a new edge in this graph, going from the source vertex to the
     * target vertex, and returns the created edge. 
     * 
     * The source and target vertices must already be contained in this
     * graph. If they are not found in graph IllegalArgumentException is
     * thrown.
     *
     *
     * @param sourceVertex source vertex of the edge.
     * @param destinationVertex target vertex of the edge.
     * @param weight weight of the edge
     * @param description description for edge
     *
     * @return The newly created edge if added to the graph, otherwise null.
     *
     * @throws IllegalArgumentException if source or target vertices are not
     * found in the graph.
     * @throws NullPointerException if any of the specified vertices is null.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOLl8ZYTEe6D79QHmq15EA" name="sourceVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOLl8pYTEe6D79QHmq15EA" name="destinationVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOLl85YTEe6D79QHmq15EA" name="weight">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOLl9JYTEe6D79QHmq15EA" name="description">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOLl9ZYTEe6D79QHmq15EA" type="_IOJwwJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IOMNAJYTEe6D79QHmq15EA" name="addVertex">
        <ownedComment xmi:id="_IPYf05YTEe6D79QHmq15EA">
          <body>Adds the specified vertex to this graph if not already present. More
     * formally, adds the specified vertex, v, to this graph if
     * this graph contains no vertex u such that
     * u.equals(v). If this graph already contains such vertex, the call
     * leaves this graph unchanged and returns false. In combination
     * with the restriction on constructors, this ensures that graphs never
     * contain duplicate vertices.
     *
     * @param v vertex to be added to this graph.
     *
     * @return true if this graph did not already contain the specified
     * vertex.
     *
     * @throws NullPointerException if the specified vertex is null.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOMNAZYTEe6D79QHmq15EA" name="v" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOMNApYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOM0EJYTEe6D79QHmq15EA" name="containsEdge">
        <ownedComment xmi:id="_IPYf1JYTEe6D79QHmq15EA">
          <body>Returns true if and only if this graph contains an edge going
     * from the source vertex to the target vertex. In undirected graphs the
     * same result is obtained when source and target are inverted. If any of
     * the specified vertices does not exist in the graph, or if is
     * null, returns false.
     *
     * @param sourceVertex source vertex of the edge.
     * @param destinationVertex target vertex of the edge.
     *
     * @return true if this graph contains the specified edge.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOM0EZYTEe6D79QHmq15EA" name="sourceVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOM0EpYTEe6D79QHmq15EA" name="destinationVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOM0E5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOM0FJYTEe6D79QHmq15EA" name="containsVertex">
        <ownedComment xmi:id="_IPYf1ZYTEe6D79QHmq15EA">
          <body>Returns true if this graph contains the specified vertex. More
     * formally, returns true if and only if this graph contains a
     * vertex u such that u.equals(v). If the
     * specified vertex is null returns false.
     *
     * @param v vertex whose presence in this graph is to be tested.
     *
     * @return true if this graph contains the specified vertex.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOM0FZYTEe6D79QHmq15EA" name="v" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IONbIJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IONbIZYTEe6D79QHmq15EA" name="edgesOf">
        <ownedComment xmi:id="_IPYf15YTEe6D79QHmq15EA">
          <body>Returns a set of all edges touching the specified vertex (also
     * referred to as adjacent vertices). If no edges are
     * touching the specified vertex returns an empty set.
     *
     * @param vertex the vertex for which a set of touching edges is to be
     * returned.
     *
     * @return a set of all edges touching the specified vertex.
     *
     * @throws IllegalArgumentException if vertex is not found in the graph.
     * @throws NullPointerException if vertex is null.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IONbIpYTEe6D79QHmq15EA" name="vertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IONbI5YTEe6D79QHmq15EA" type="_IOJwwJYTEe6D79QHmq15EA" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IONbJJYTEe6D79QHmq15EA" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOOCMJYTEe6D79QHmq15EA" name="removeEdge">
        <ownedComment xmi:id="_IPYf2JYTEe6D79QHmq15EA">
          <body>Removes an edge going from source vertex to target vertex, if such
     * vertices and such edge exist in this graph. 
     * 
     * If weight >- 1 it must be checked
     * If description != null, it must be checked 
     * 
     * Returns the edge if removed
     * or null otherwise.
     *
     * @param sourceVertex source vertex of the edge.
     * @param destinationVertex target vertex of the edge.
     * @param weight weight of the edge
     * @param description description of the edge
     *
     * @return The removed edge, or null if no edge removed.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOOCMZYTEe6D79QHmq15EA" name="sourceVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOOCMpYTEe6D79QHmq15EA" name="destinationVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOOCM5YTEe6D79QHmq15EA" name="weight">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOOCNJYTEe6D79QHmq15EA" name="description">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOOpQJYTEe6D79QHmq15EA" type="_IOJwwJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IOOpQZYTEe6D79QHmq15EA" name="removeVertex">
        <ownedComment xmi:id="_IPYf2ZYTEe6D79QHmq15EA">
          <body>Removes the specified vertex from this graph including all its touching
     * edges if present. More formally, if the graph contains a vertex 
     * u such that u.equals(v), the call removes all edges
     * that touch u and then removes u itself. If no
     * such u is found, the call leaves the graph unchanged.
     * Returns true if the graph contained the specified vertex. (The
     * graph will not contain the specified vertex once the call returns).
     *
     * If the specified vertex is null returns false.
     *
     * @param v vertex to be removed from this graph, if present.
     *
     * @return true if the graph contained the specified vertex;
     * false otherwise.</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOOpQpYTEe6D79QHmq15EA" name="v" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOPQUJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOP3YJYTEe6D79QHmq15EA" name="shortestPath">
        <ownedComment xmi:id="_IPZG4ZYTEe6D79QHmq15EA">
          <body>Find the shortest path from the sourceVertex to the destinationVertex
     * call the dijkstraShortestPath with the sourceVertex
     * @param sourceVertex starting vertex
     * @param destinationVertex ending vertex
     * @return An arraylist of Strings that describe the path from sourceVertex
     * to destinationVertex
     * They will be in the format: startVertex &quot;via&quot; Edge &quot;to&quot; endVertex weight
	 * As an example: if finding path from Vertex_1 to Vertex_10, the ArrayList&lt;String>
	 * would be in the following format(this is a hypothetical solution):
	 * Vertex_1 via Edge_2 to Vertex_3 4 (first string in ArrayList)
	 * Vertex_3 via Edge_5 to Vertex_8 2 (second string in ArrayList)
	 * Vertex_8 via Edge_9 to Vertex_10 2 (third string in ArrayList)</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOP3YZYTEe6D79QHmq15EA" name="sourceVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOP3YpYTEe6D79QHmq15EA" name="destinationVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOQecZYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IOQecpYTEe6D79QHmq15EA" name="dijkstraShortestPath">
        <ownedComment xmi:id="_IPZG4pYTEe6D79QHmq15EA">
          <body>Dijkstra's Shortest Path Method.  Internal structures are built which
     * hold the ability to retrieve the path, shortest distance from the
     * sourceVertex to all the other vertices in the graph, etc.
     * @param sourceVertex the vertex to find shortest path from
     *</body>
        </ownedComment>
        <ownedParameter xmi:id="_IORFgJYTEe6D79QHmq15EA" name="sourceVertex" type="_IOKX0JYTEe6D79QHmq15EA"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IHzRIJYTEe6D79QHmq15EA" name="GraphTest">
      <ownedAttribute xmi:id="_IOr8QJYTEe6D79QHmq15EA" name="graph" visibility="private" type="_IHquQJYTEe6D79QHmq15EA" association="_IPplkZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOtKYpYTEe6D79QHmq15EA" name="town" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPqMoJYTEe6D79QHmq15EA">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IOtxcJYTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPBTdpYTEe6D79QHmq15EA" name="setUp" specification="_IHz4MJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = new Graph();
		  town = new Town[12];
		  
		  for (int i = 1; i &lt; 12; i++) {
			  town[i] = new Town(&quot;Town_&quot; + i);
			  graph.addVertex(town[i]);
		  }
		  
		  graph.addEdge(town[1], town[2], 2, &quot;Road_1&quot;);
		  graph.addEdge(town[1], town[3], 4, &quot;Road_2&quot;);
		  graph.addEdge(town[1], town[5], 6, &quot;Road_3&quot;);
		  graph.addEdge(town[3], town[7], 1, &quot;Road_4&quot;);
		  graph.addEdge(town[3], town[8], 2, &quot;Road_5&quot;);
		  graph.addEdge(town[4], town[8], 3, &quot;Road_6&quot;);
		  graph.addEdge(town[6], town[9], 3, &quot;Road_7&quot;);
		  graph.addEdge(town[9], town[10], 4, &quot;Road_8&quot;);
		  graph.addEdge(town[8], town[10], 2, &quot;Road_9&quot;);
		  graph.addEdge(town[5], town[10], 5, &quot;Road_10&quot;);
		  graph.addEdge(town[10], town[11], 3, &quot;Road_11&quot;);
		  graph.addEdge(town[2], town[11], 6, &quot;Road_12&quot;);
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6gJYTEe6D79QHmq15EA" name="tearDown" specification="_IH1GUJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = null;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6gZYTEe6D79QHmq15EA" name="testGetEdge" specification="_IH1tYZYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(new Road(town[2], town[11],6, &quot;Road_12&quot;), graph.getEdge(town[2], town[11]));
		assertEquals(new Road(town[3], town[7],1, &quot;Road_4&quot;), graph.getEdge(town[3], town[7]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6gpYTEe6D79QHmq15EA" name="testAddEdge" specification="_IH2UcpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(false, graph.containsEdge(town[3], town[5]));
		graph.addEdge(town[3], town[5], 1, &quot;Road_13&quot;);
		assertEquals(true, graph.containsEdge(town[3], town[5]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6g5YTEe6D79QHmq15EA" name="testAddVertex" specification="_IH27gpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Town newTown = new Town(&quot;Town_12&quot;);
		assertEquals(false, graph.containsVertex(newTown));
		graph.addVertex(newTown);
		assertEquals(true, graph.containsVertex(newTown));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6hJYTEe6D79QHmq15EA" name="testContainsEdge" specification="_IH4JoJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsEdge(town[2], town[11]));
		assertEquals(false, graph.containsEdge(town[3], town[5]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6hZYTEe6D79QHmq15EA" name="testContainsVertex" specification="_IH4wspYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsVertex(new Town(&quot;Town_2&quot;)));
		assertEquals(false, graph.containsVertex(new Town(&quot;Town_12&quot;)));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6hpYTEe6D79QHmq15EA" name="testEdgeSet" specification="_IH5XwpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Set&lt;Road> roads = graph.edgeSet();
		ArrayList&lt;String> roadArrayList = new ArrayList&lt;String>();
		for(Road road : roads)
			roadArrayList.add(road.getName());
		Collections.sort(roadArrayList);
		assertEquals(&quot;Road_1&quot;, roadArrayList.get(0));
		assertEquals(&quot;Road_10&quot;, roadArrayList.get(1));
		assertEquals(&quot;Road_11&quot;, roadArrayList.get(2));
		assertEquals(&quot;Road_12&quot;, roadArrayList.get(3));
		assertEquals(&quot;Road_2&quot;, roadArrayList.get(4));
		assertEquals(&quot;Road_8&quot;, roadArrayList.get(10));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6h5YTEe6D79QHmq15EA" name="testEdgesOf" specification="_IH5-0pYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Set&lt;Road> roads = graph.edgesOf(town[1]);
		ArrayList&lt;String> roadArrayList = new ArrayList&lt;String>();
		for(Road road : roads)
			roadArrayList.add(road.getName());
		Collections.sort(roadArrayList);
		assertEquals(&quot;Road_1&quot;, roadArrayList.get(0));
		assertEquals(&quot;Road_2&quot;, roadArrayList.get(1));
		assertEquals(&quot;Road_3&quot;, roadArrayList.get(2));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPB6iJYTEe6D79QHmq15EA" name="testRemoveEdge" specification="_IH7M8JYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsEdge(town[2], town[11]));
		graph.removeEdge(town[2], town[11], 6, &quot;Road_12&quot;);
		assertEquals(false, graph.containsEdge(town[2], town[11]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPChkJYTEe6D79QHmq15EA" name="testRemoveVertex" specification="_IH70AZYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsVertex(town[2]));
		graph.removeVertex(town[2]);
		assertEquals(false, graph.containsVertex(town[2]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPChkZYTEe6D79QHmq15EA" name="testVertexSet" specification="_IH8bEJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Set&lt;Town> roads = graph.vertexSet();
		assertEquals(true,roads.contains(town[1]));
		assertEquals(true, roads.contains(town[10]));
		assertEquals(true, roads.contains(town[11]));
		assertEquals(true, roads.contains(town[2]));
		assertEquals(true, roads.contains(town[3]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPChkpYTEe6D79QHmq15EA" name="testTown_1ToTown_11" specification="_IH8bFJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>String beginTown = &quot;Town_1&quot;, endTown = &quot;Town_11&quot;;
		  Town beginIndex=null, endIndex=null;
		  Set&lt;Town> towns = graph.vertexSet();
		  Iterator&lt;Town> iterator = towns.iterator();
		  while(iterator.hasNext())
		  {    	
			  Town town = iterator.next();
			  if(town.getName().equals(beginTown))
				  beginIndex = town;
			  if(town.getName().equals(endTown))
				  endIndex = town;		
		  }
		  if(beginIndex != null &amp;&amp; endIndex != null)
		  {

			  ArrayList&lt;String> path = graph.shortestPath(beginIndex,endIndex);
			  assertNotNull(path);
			  assertTrue(path.size() > 0);
			  assertEquals(&quot;Town_1 via Road_1 to Town_2 2 mi&quot;,path.get(0).trim());
			  assertEquals(&quot;Town_2 via Road_12 to Town_11 6 mi&quot;,path.get(1).trim());
		  }
		  else
			  fail(&quot;Town names are not valid&quot;);

	  </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPChk5YTEe6D79QHmq15EA" name="testTown1ToTown_10" specification="_IH9CI5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>String beginTown = &quot;Town_1&quot;, endTown = &quot;Town_10&quot;;
		  Town beginIndex=null, endIndex=null;
		  Set&lt;Town> towns = graph.vertexSet();
		  Iterator&lt;Town> iterator = towns.iterator();
		  while(iterator.hasNext())
		  {    	
			  Town town = iterator.next();
			  if(town.getName().equals(beginTown))
				  beginIndex = town;
			  if(town.getName().equals(endTown))
				  endIndex = town;		
		  }
		  if(beginIndex != null &amp;&amp; endIndex != null)
		  {

			  ArrayList&lt;String> path = graph.shortestPath(beginIndex,endIndex);
			  assertNotNull(path);
			  assertTrue(path.size() > 0);
			  assertEquals(&quot;Town_1 via Road_2 to Town_3 4 mi&quot;,path.get(0).trim());
			  assertEquals(&quot;Town_3 via Road_5 to Town_8 2 mi&quot;,path.get(1).trim());
			  assertEquals(&quot;Town_8 via Road_9 to Town_10 2 mi&quot;,path.get(2).trim());
		  }
		  else
			  fail(&quot;Town names are not valid&quot;);

	  </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDIoJYTEe6D79QHmq15EA" name="testTown_4ToTown_11" specification="_IH9CJ5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>String beginTown = &quot;Town_4&quot;, endTown = &quot;Town_11&quot;;
		  Town beginIndex=null, endIndex=null;
		  Set&lt;Town> towns = graph.vertexSet();
		  Iterator&lt;Town> iterator = towns.iterator();
		  while(iterator.hasNext())
		  {    	
			  Town town = iterator.next();
			  if(town.getName().equals(beginTown))
				  beginIndex = town;
			  if(town.getName().equals(endTown))
				  endIndex = town;		
		  }
		  if(beginIndex != null &amp;&amp; endIndex != null)
		  {

			  ArrayList&lt;String> path = graph.shortestPath(beginIndex,endIndex);
			  assertNotNull(path);
			  assertTrue(path.size() > 0);
			  assertEquals(&quot;Town_4 via Road_6 to Town_8 3 mi&quot;,path.get(0).trim());
			  assertEquals(&quot;Town_8 via Road_9 to Town_10 2 mi&quot;,path.get(1).trim());
			  assertEquals(&quot;Town_10 via Road_11 to Town_11 3 mi&quot;,path.get(2).trim());
		  }
		  else
			  fail(&quot;Town names are not valid&quot;);

	  </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IHz4MJYTEe6D79QHmq15EA" name="setUp" method="_IPBTdpYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH1GUJYTEe6D79QHmq15EA" name="tearDown" method="_IPB6gJYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH1tYZYTEe6D79QHmq15EA" name="testGetEdge" method="_IPB6gZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH2UcpYTEe6D79QHmq15EA" name="testAddEdge" method="_IPB6gpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH27gpYTEe6D79QHmq15EA" name="testAddVertex" method="_IPB6g5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH4JoJYTEe6D79QHmq15EA" name="testContainsEdge" method="_IPB6hJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH4wspYTEe6D79QHmq15EA" name="testContainsVertex" method="_IPB6hZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH5XwpYTEe6D79QHmq15EA" name="testEdgeSet" method="_IPB6hpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH5-0pYTEe6D79QHmq15EA" name="testEdgesOf" method="_IPB6h5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH7M8JYTEe6D79QHmq15EA" name="testRemoveEdge" method="_IPB6iJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH70AZYTEe6D79QHmq15EA" name="testRemoveVertex" method="_IPChkJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH8bEJYTEe6D79QHmq15EA" name="testVertexSet" method="_IPChkZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH8bFJYTEe6D79QHmq15EA" name="testTown_1ToTown_11" method="_IPChkpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH9CI5YTEe6D79QHmq15EA" name="testTown1ToTown_10" method="_IPChk5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IH9CJ5YTEe6D79QHmq15EA" name="testTown_4ToTown_11" method="_IPDIoJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IH-3UJYTEe6D79QHmq15EA" name="Graph_GFA_Test">
      <ownedAttribute xmi:id="_IOuYgJYTEe6D79QHmq15EA" name="graph" visibility="private" type="_IHquQJYTEe6D79QHmq15EA" association="_IPqMo5YTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOvmoZYTEe6D79QHmq15EA" name="town" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPqzsZYTEe6D79QHmq15EA">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IOvmopYTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDIoZYTEe6D79QHmq15EA" name="setUp" specification="_IH_eYJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = new Graph();
		  town = new Town[3];
		  
		  for (int i = 0; i &lt; 3; i++) {
			  town[i] = new Town(&quot;Town_&quot; + i);
			  graph.addVertex(town[i]);
		  }
		  
		  graph.addEdge(town[0], town[1], 2, &quot;Road_1&quot;);
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDIopYTEe6D79QHmq15EA" name="tearDown" specification="_IIAFc5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = null;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDIo5YTEe6D79QHmq15EA" name="testGetEdge" specification="_IIBTkJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(new Road(town[1], town[0],2, &quot;Road_1&quot;), graph.getEdge(town[1], town[0]));
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IH_eYJYTEe6D79QHmq15EA" name="setUp" method="_IPDIoZYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIAFc5YTEe6D79QHmq15EA" name="tearDown" method="_IPDIopYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIBTkJYTEe6D79QHmq15EA" name="testGetEdge" method="_IPDIo5YTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IIDv0JYTEe6D79QHmq15EA" name="Graph_STUDENT_Test">
      <ownedComment xmi:id="_IPZG45YTEe6D79QHmq15EA">
        <body>The Graph_STUDENT_Test class is used to test the methods of the Graph class.

@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IOw0wZYTEe6D79QHmq15EA" name="graph" visibility="private" type="_IHquQJYTEe6D79QHmq15EA" association="_IPrawZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOyC4JYTEe6D79QHmq15EA" name="town" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPsB0ZYTEe6D79QHmq15EA">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IOyC4ZYTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDIpJYTEe6D79QHmq15EA" name="setUp" specification="_IIEW4JYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = new Graph();
		  town = new Town[16];
		  
		  for (int i = 1; i &lt; 15; i++) {
			  town[i] = new Town(&quot;Town_&quot; + i);
			  graph.addVertex(town[i]);
		  }
		  
		  graph.addEdge(town[1], town[3], 15, &quot;Road_A&quot;);
		  graph.addEdge(town[1], town[5], 14, &quot;Road_B&quot;);
		  graph.addEdge(town[1], town[7], 13, &quot;Road_C&quot;);
		  graph.addEdge(town[1], town[9], 12, &quot;Road_D&quot;);
		  graph.addEdge(town[1], town[11], 11, &quot;Road_E&quot;);
		  graph.addEdge(town[2], town[13], 10, &quot;Road_F&quot;);
		  graph.addEdge(town[2], town[14], 9, &quot;Road_G&quot;);
		  graph.addEdge(town[2], town[1], 8, &quot;Road_H&quot;);
		  graph.addEdge(town[3], town[4], 7, &quot;Road_I&quot;);
		  graph.addEdge(town[14], town[6], 6, &quot;Road_J&quot;);
		  graph.addEdge(town[7], town[8], 5, &quot;Road_K&quot;);
		  graph.addEdge(town[14], town[10], 4, &quot;Road_L&quot;);
		  graph.addEdge(town[13], town[12], 3, &quot;Road_M&quot;);
		  graph.addEdge(town[4], town[14], 2, &quot;Road_N&quot;);
		  graph.addEdge(town[12], town[6], 1, &quot;Road_O&quot;);
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvsJYTEe6D79QHmq15EA" name="tearDown" specification="_IIFlAJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = null;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvsZYTEe6D79QHmq15EA" name="testGetEdge" specification="_IIGMEpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(new Road(town[1], town[5],14, &quot;Road_B&quot;), graph.getEdge(town[1], town[5]));
		assertEquals(new Road(town[14], town[6],6, &quot;Road_J&quot;), graph.getEdge(town[14], town[6]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvspYTEe6D79QHmq15EA" name="testAddEdge" specification="_IIGzIpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(false, graph.containsEdge(town[10], town[13]));
		graph.addEdge(town[10], town[13], 9, &quot;Road_S&quot;);
		assertEquals(true, graph.containsEdge(town[10], town[13]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvs5YTEe6D79QHmq15EA" name="testAddVertex" specification="_IIHaMpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Town newTown = new Town(&quot;Town_16&quot;);
		assertEquals(false, graph.containsVertex(newTown));
		graph.addVertex(newTown);
		assertEquals(true, graph.containsVertex(newTown));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvtJYTEe6D79QHmq15EA" name="testContainsEdge" specification="_IIIBQpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsEdge(town[7], town[8]));
		assertEquals(false, graph.containsEdge(town[12], town[14]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvtZYTEe6D79QHmq15EA" name="testContainsVertex" specification="_IIIoUpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsVertex(new Town(&quot;Town_14&quot;)));
		assertEquals(false, graph.containsVertex(new Town(&quot;Town_15&quot;)));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvtpYTEe6D79QHmq15EA" name="testEdgeSet" specification="_IIJPYJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Set&lt;Road> roads = graph.edgeSet();
		ArrayList&lt;String> roadArrayList = new ArrayList&lt;String>();
		for(Road road : roads)
			roadArrayList.add(road.getName());
		Collections.sort(roadArrayList);
		assertEquals(&quot;Road_A&quot;, roadArrayList.get(0));
		assertEquals(&quot;Road_B&quot;, roadArrayList.get(1));
		assertEquals(&quot;Road_C&quot;, roadArrayList.get(2));
		assertEquals(&quot;Road_D&quot;, roadArrayList.get(3));
		assertEquals(&quot;Road_E&quot;, roadArrayList.get(4));
		assertEquals(&quot;Road_F&quot;, roadArrayList.get(5));
		assertEquals(&quot;Road_G&quot;, roadArrayList.get(6));
		assertEquals(&quot;Road_H&quot;, roadArrayList.get(7));
		assertEquals(&quot;Road_I&quot;, roadArrayList.get(8));
		assertEquals(&quot;Road_J&quot;, roadArrayList.get(9));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPDvt5YTEe6D79QHmq15EA" name="testEdgesOf" specification="_IIJPZJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Set&lt;Road> roads = graph.edgesOf(town[1]);
		ArrayList&lt;String> roadArrayList = new ArrayList&lt;String>();
		for(Road road : roads)
			roadArrayList.add(road.getName());
		Collections.sort(roadArrayList);
		assertEquals(&quot;Road_A&quot;, roadArrayList.get(0));
		assertEquals(&quot;Road_B&quot;, roadArrayList.get(1));
		assertEquals(&quot;Road_C&quot;, roadArrayList.get(2));
		assertEquals(&quot;Road_D&quot;, roadArrayList.get(3));
		assertEquals(&quot;Road_E&quot;, roadArrayList.get(4));
		assertEquals(&quot;Road_H&quot;, roadArrayList.get(5));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPEWwJYTEe6D79QHmq15EA" name="testRemoveVertex" specification="_IIJ2c5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsVertex(town[14]));
		graph.removeVertex(town[14]);
		assertEquals(false, graph.containsVertex(town[14]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPEWwZYTEe6D79QHmq15EA" name="testVertexSet" specification="_IIKdgpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>Set&lt;Town> roads = graph.vertexSet();
		assertEquals(true,roads.contains(town[4]));
		assertEquals(true, roads.contains(town[6]));
		assertEquals(true, roads.contains(town[8]));
		assertEquals(true, roads.contains(town[10]));
		assertEquals(true, roads.contains(town[12]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPEWwpYTEe6D79QHmq15EA" name="testTown_1ToTown_5" specification="_IILEkpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>String beginTown = &quot;Town_1&quot;, endTown = &quot;Town_5&quot;;
		Town beginIndex=null, endIndex=null;
		Set&lt;Town> towns = graph.vertexSet();
		Iterator&lt;Town> iterator = towns.iterator();
		while(iterator.hasNext()) {    	
			Town town = iterator.next();
			if(town.getName().equals(beginTown))
				beginIndex = town;
			if(town.getName().equals(endTown))
				endIndex = town;		
		}
		if (beginIndex != null &amp;&amp; endIndex != null) {
			ArrayList&lt;String> path = graph.shortestPath(beginIndex,endIndex);
			assertNotNull(path);
			assertTrue(path.size() > 0);
			assertEquals(&quot;Town_1 via Road_B to Town_5 14 mi&quot;,path.get(0).trim());
		}
		else
			fail(&quot;Town names are not valid&quot;);

	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPEWw5YTEe6D79QHmq15EA" name="testTown1ToTown_14" specification="_IILropYTEe6D79QHmq15EA">
        <language>java</language>
        <body>String beginTown = &quot;Town_1&quot;, endTown = &quot;Town_14&quot;;
		Town beginIndex=null, endIndex=null;
		Set&lt;Town> towns = graph.vertexSet();
		Iterator&lt;Town> iterator = towns.iterator();
		while(iterator.hasNext()) {  	
			Town town = iterator.next();
			if(town.getName().equals(beginTown))
				beginIndex = town;
			if(town.getName().equals(endTown))
				endIndex = town;		
		}
		if (beginIndex != null &amp;&amp; endIndex != null) {
			ArrayList&lt;String> path = graph.shortestPath(beginIndex,endIndex);
			assertNotNull(path);
			assertTrue(path.size() > 0);
			assertEquals(&quot;Town_1 via Road_H to Town_2 8 mi&quot;,path.get(0).trim());
			assertEquals(&quot;Town_2 via Road_G to Town_14 9 mi&quot;,path.get(1).trim());
		}
		else
			fail(&quot;Town names are not valid&quot;);

	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPEWxJYTEe6D79QHmq15EA" name="testTown_8ToTown_12" specification="_IIM5wJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>String beginTown = &quot;Town_8&quot;, endTown = &quot;Town_12&quot;;
		Town beginIndex=null, endIndex=null;
		Set&lt;Town> towns = graph.vertexSet();
		Iterator&lt;Town> iterator = towns.iterator();
		while(iterator.hasNext()) {    	
			Town town = iterator.next();
			if(town.getName().equals(beginTown))
				beginIndex = town;
			if(town.getName().equals(endTown))
				endIndex = town;		
		}
		if (beginIndex != null &amp;&amp; endIndex != null) {
			ArrayList&lt;String> path = graph.shortestPath(beginIndex,endIndex);
			assertNotNull(path);
			assertTrue(path.size() > 0);
			assertEquals(&quot;Town_8 via Road_K to Town_7 5 mi&quot;,path.get(0).trim());
			assertEquals(&quot;Town_7 via Road_C to Town_1 13 mi&quot;,path.get(1).trim());
			assertEquals(&quot;Town_1 via Road_H to Town_2 8 mi&quot;,path.get(2).trim());
			assertEquals(&quot;Town_2 via Road_F to Town_13 10 mi&quot;,path.get(3).trim());
			assertEquals(&quot;Town_13 via Road_M to Town_12 3 mi&quot;,path.get(4).trim());
		}
		else
			fail(&quot;Town names are not valid&quot;);

	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IIEW4JYTEe6D79QHmq15EA" name="setUp" method="_IPDIpJYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIFlAJYTEe6D79QHmq15EA" name="tearDown" method="_IPDvsJYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIGMEpYTEe6D79QHmq15EA" name="testGetEdge" method="_IPDvsZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIGzIpYTEe6D79QHmq15EA" name="testAddEdge" method="_IPDvspYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIHaMpYTEe6D79QHmq15EA" name="testAddVertex" method="_IPDvs5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIIBQpYTEe6D79QHmq15EA" name="testContainsEdge" method="_IPDvtJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIIoUpYTEe6D79QHmq15EA" name="testContainsVertex" method="_IPDvtZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIJPYJYTEe6D79QHmq15EA" name="testEdgeSet" method="_IPDvtpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIJPZJYTEe6D79QHmq15EA" name="testEdgesOf" method="_IPDvt5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIJ2c5YTEe6D79QHmq15EA" name="testRemoveVertex" method="_IPEWwJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIKdgpYTEe6D79QHmq15EA" name="testVertexSet" method="_IPEWwZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IILEkpYTEe6D79QHmq15EA" name="testTown_1ToTown_5" method="_IPEWwpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IILropYTEe6D79QHmq15EA" name="testTown1ToTown_14" method="_IPEWw5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIM5wJYTEe6D79QHmq15EA" name="testTown_8ToTown_12" method="_IPEWxJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IIOu8JYTEe6D79QHmq15EA" name="Road">
      <ownedComment xmi:id="_IPZG5JYTEe6D79QHmq15EA">
        <body>The Road class is an edge in a graph of towns.
It has references to the two towns, the distance between these towns, and a name for the road. This class implements the `Comparable`
It implements the Comparable interface.
 *
@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IOyp8JYTEe6D79QHmq15EA" name="source" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPso4ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOyp8pYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA" isReadOnly="true" association="_IPtP8ZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOzRAJYTEe6D79QHmq15EA" name="distance" visibility="private">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IOzRApYTEe6D79QHmq15EA" name="name" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <interfaceRealization xmi:id="_IOThwZYTEe6D79QHmq15EA" client="_IIOu8JYTEe6D79QHmq15EA" supplier="_IOS6sJYTEe6D79QHmq15EA" contract="_IOS6sJYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPE90JYTEe6D79QHmq15EA" name="Road" specification="_INtr4JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPE90ZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPE90pYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPE905YTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPE91JYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPE91ZYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>this.source = source;
     this.destination = destination;
     this.distance = distance;
     this.name = name;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPE91pYTEe6D79QHmq15EA" name="Road" specification="_INuS9JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPE915YTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPE92JYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPE92ZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPE92pYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>this(source, destination, 1, name);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPE925YTEe6D79QHmq15EA" name="contains" specification="_INu6ApYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPE93JYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPE93ZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>return source.equals(town) || destination.equals(town);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPFk4JYTEe6D79QHmq15EA" name="toString" specification="_IIQkIJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPFk4ZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>return String.format(&quot;%s via %s to %s %dmi&quot;, source.getName(), name, destination.getName(), distance);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPFk4pYTEe6D79QHmq15EA" name="getSource" specification="_IIRyQZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPFk45YTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>return source;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPFk5JYTEe6D79QHmq15EA" name="compareTo" specification="_INu6BpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPFk5ZYTEe6D79QHmq15EA" name="road" type="_IIOu8JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPFk5pYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <language>java</language>
        <body>return this.name.compareTo(road.getName());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPFk55YTEe6D79QHmq15EA" name="getWeight" specification="_IISZUJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPFk6JYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <language>java</language>
        <body>return distance;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPFk6ZYTEe6D79QHmq15EA" name="equals" specification="_IOUv4pYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPFk6pYTEe6D79QHmq15EA" name="road" type="_IOUv4JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPFk65YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>if (this == road) return true;
     if (road == null || getClass() != road.getClass()) return false;
     Road otherRoad = (Road) road;
     return (source.equals(otherRoad.getSource()) &amp;&amp; destination.equals(otherRoad.getDestination())) ||
            (source.equals(otherRoad.getDestination()) &amp;&amp; destination.equals(otherRoad.getSource()));
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IIQkIJYTEe6D79QHmq15EA" name="toString" method="_IPFk4JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIRLMJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIRyQZYTEe6D79QHmq15EA" name="getSource" method="_IPFk4pYTEe6D79QHmq15EA">
        <ownedComment xmi:id="_IPZt8ZYTEe6D79QHmq15EA">
          <body>Getter method for the source town.
     *
     * @return A town on the road</body>
        </ownedComment>
        <ownedParameter xmi:id="_INu6BZYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IISZUJYTEe6D79QHmq15EA" name="getWeight" method="_IPFk55YTEe6D79QHmq15EA">
        <ownedComment xmi:id="_IPZt8pYTEe6D79QHmq15EA">
          <body>Getter method for the distance of the road.
     *
     * @return the distance of the road</body>
        </ownedComment>
        <ownedParameter xmi:id="_IISZUZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INtr4JYTEe6D79QHmq15EA" name="Road" method="_IPE90JYTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_INuS8ZYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_INuS8pYTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedComment xmi:id="_IPZG5ZYTEe6D79QHmq15EA">
          <body>Constructor with specific distance.
     *
     * @param source      Source town of the road
     * @param destination Destination town of the road
     * @param distance    Distance from one town to the other
     * @param name        Name of the road</body>
        </ownedComment>
        <ownedParameter xmi:id="_INtr4ZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INtr4pYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INtr45YTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INuS8JYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INuS85YTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INuS9JYTEe6D79QHmq15EA" name="Road" method="_IPE91pYTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_INuS-JYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_INu6AJYTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedComment xmi:id="_IPZG5pYTEe6D79QHmq15EA">
          <body>Constructor with default distance 1.
     *
     * @param source      Source town of the road
     * @param destination Destination town of the road
     * @param name        Name of the road</body>
        </ownedComment>
        <ownedParameter xmi:id="_INuS9ZYTEe6D79QHmq15EA" name="source" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INuS9pYTEe6D79QHmq15EA" name="destination" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INuS95YTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INu6AZYTEe6D79QHmq15EA" type="_IIOu8JYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INu6ApYTEe6D79QHmq15EA" name="contains" method="_IPE925YTEe6D79QHmq15EA">
        <ownedComment xmi:id="_IPZt8JYTEe6D79QHmq15EA">
          <body>Returns true if the edge contains the given town.
     *
     * @param town       a town of the graph
     * @return true only if the edge is connected to the given vertex</body>
        </ownedComment>
        <ownedParameter xmi:id="_INu6A5YTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INu6BJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INu6BpYTEe6D79QHmq15EA" name="compareTo" method="_IPFk5JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INu6B5YTEe6D79QHmq15EA" name="road" type="_IIOu8JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INvhEJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOUv4pYTEe6D79QHmq15EA" name="equals" method="_IPFk6ZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IOUv45YTEe6D79QHmq15EA" name="road" type="_IOUv4JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOVW8JYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IIVcoJYTEe6D79QHmq15EA" name="Road_STUDENT_Test">
      <ownedComment xmi:id="_IPZt85YTEe6D79QHmq15EA">
        <body>The Road_STUDENT_Test class is used to test the methods of the Road class.

@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IOz4EJYTEe6D79QHmq15EA" name="town1" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPt3AZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IOz4EpYTEe6D79QHmq15EA" name="town2" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPueEZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO0fIZYTEe6D79QHmq15EA" name="town3" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPueFJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO0fI5YTEe6D79QHmq15EA" name="road1" visibility="private" type="_IIOu8JYTEe6D79QHmq15EA" association="_IPvFIZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO0fJZYTEe6D79QHmq15EA" name="road2" visibility="private" type="_IIOu8JYTEe6D79QHmq15EA" association="_IPvsMZYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL8JYTEe6D79QHmq15EA" name="setUp" specification="_IIWqwJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>town1 = new Town(&quot;London&quot;);
     town2 = new Town(&quot;New York&quot;);
     town3 = new Town(&quot;Kyiv&quot;);
     road1 = new Road(town1, town2, 2000, &quot;Road 1&quot;);
     road2 = new Road(town2, town3, 3000, &quot;Road 2&quot;);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL8ZYTEe6D79QHmq15EA" name="tearDown" specification="_IIX44JYTEe6D79QHmq15EA">
        <language>java</language>
        <body>town1 = null;
     town2 = null;
     town3 = null;
     road1 = null;
     road2 = null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL8pYTEe6D79QHmq15EA" name="testConstructorWithDistance" specification="_IIZHAZYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;London via Road 1 to New York 2000mi&quot;, road1.toString());
     assertEquals(&quot;New York via Road 2 to Kyiv 3000mi&quot;, road2.toString());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL85YTEe6D79QHmq15EA" name="testConstructorWithDefaultDistance" specification="_IIZuE5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>Road road = new Road(town1, town2, &quot;Road B&quot;);
     assertEquals(&quot;London via Road B to New York 1mi&quot;, road.toString());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL9JYTEe6D79QHmq15EA" name="testGetName" specification="_IIaVI5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Road 1&quot;, road1.getName());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL9ZYTEe6D79QHmq15EA" name="testGetSource" specification="_IIa8MJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(town1, road1.getSource());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL9pYTEe6D79QHmq15EA" name="testGetDestination" specification="_IIa8NJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(town2, road1.getDestination());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL95YTEe6D79QHmq15EA" name="testGetWeight" specification="_IIbjQpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(2000, road1.getWeight());
     assertEquals(3000, road2.getWeight());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGL-JYTEe6D79QHmq15EA" name="testContains" specification="_IIbjRpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertTrue(road1.contains(town1));
     assertTrue(road1.contains(town2));
     assertFalse(road2.contains(town1));
     assertFalse(road1.contains(new Town(&quot;Town3&quot;)));
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGzAJYTEe6D79QHmq15EA" name="testCompareTo" specification="_IIcKU5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertNotEquals(0, road1.compareTo(road2));
     assertEquals(0, road1.compareTo(new Road(town1, town2, 2000, &quot;Road 1&quot;)));
     assertNotEquals(0, road1.compareTo(new Road(town1, town2, 10, &quot;Road 3&quot;)));
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGzAZYTEe6D79QHmq15EA" name="testEquals" specification="_IIcxYJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertFalse(road1.equals(road2));
     assertTrue(road2.equals(new Road(town2, town3, 3000, &quot;Road 2&quot;)));
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IIWqwJYTEe6D79QHmq15EA" name="setUp" method="_IPGL8JYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIX44JYTEe6D79QHmq15EA" name="tearDown" method="_IPGL8ZYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIZHAZYTEe6D79QHmq15EA" name="testConstructorWithDistance" method="_IPGL8pYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIZuE5YTEe6D79QHmq15EA" name="testConstructorWithDefaultDistance" method="_IPGL85YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIaVI5YTEe6D79QHmq15EA" name="testGetName" method="_IPGL9JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIa8MJYTEe6D79QHmq15EA" name="testGetSource" method="_IPGL9ZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIa8NJYTEe6D79QHmq15EA" name="testGetDestination" method="_IPGL9pYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIbjQpYTEe6D79QHmq15EA" name="testGetWeight" method="_IPGL95YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIbjRpYTEe6D79QHmq15EA" name="testContains" method="_IPGL-JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIcKU5YTEe6D79QHmq15EA" name="testCompareTo" method="_IPGzAJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IIcxYJYTEe6D79QHmq15EA" name="testEquals" method="_IPGzAZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IIemkJYTEe6D79QHmq15EA" name="Town">
      <ownedComment xmi:id="_IPZt9JYTEe6D79QHmq15EA">
        <body>The Town class is a vertix in a graph of towns.
It has a name of the town and a list of adjacent towns.
It implements the Comparable interface.

@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IO1GMZYTEe6D79QHmq15EA" name="name" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IO1tQJYTEe6D79QHmq15EA" name="adjTowns" visibility="private" type="_INMHcJYTEe6D79QHmq15EA" association="_IPvsNJYTEe6D79QHmq15EA"/>
      <interfaceRealization xmi:id="_IOWlEJYTEe6D79QHmq15EA" client="_IIemkJYTEe6D79QHmq15EA" supplier="_IOS6sJYTEe6D79QHmq15EA" contract="_IOS6sJYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGzApYTEe6D79QHmq15EA" name="Town" specification="_IIf0sJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPGzA5YTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPGzBJYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>this.name = name;
		this.adjTowns = new ArrayList&lt;>();
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGzBZYTEe6D79QHmq15EA" name="Town" specification="_INzLcJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPGzBpYTEe6D79QHmq15EA" name="templateTown" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPGzB5YTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>this.name = templateTown.getName();
     this.adjTowns = new ArrayList&lt;>(templateTown.getAdjTowns());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGzCJYTEe6D79QHmq15EA" name="getAdjTowns" specification="_IIhC0JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPGzCZYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>return new ArrayList&lt;>(adjTowns);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPGzCpYTEe6D79QHmq15EA" name="compareTo" specification="_INzygJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPGzC5YTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPGzDJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <language>java</language>
        <body>return this.name.compareTo(town.getName());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPHaEJYTEe6D79QHmq15EA" name="toString" specification="_IIiQ8JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPHaEZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>return name;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPHaEpYTEe6D79QHmq15EA" name="hashCode" specification="_IIi4A5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPHaE5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <language>java</language>
        <body>return name.hashCode();
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPHaFJYTEe6D79QHmq15EA" name="equals" specification="_IOXzMZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPHaFZYTEe6D79QHmq15EA" name="town" type="_IOUv4JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IPHaFpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>if (this == town) return true;
     if (town == null || getClass() != town.getClass()) return false;
     return getName().equals(((Town) town).getName());
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IIf0sJYTEe6D79QHmq15EA" name="Town" method="_IPGzApYTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_IIgbwJYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_IIgbwZYTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedComment xmi:id="_IPZt9ZYTEe6D79QHmq15EA">
          <body>Constructor with the town's name.
     *
     * @param name       the name of the town</body>
        </ownedComment>
        <ownedParameter xmi:id="_IIf0sZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIgbwpYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IIhC0JYTEe6D79QHmq15EA" name="getAdjTowns" method="_IPGzCJYTEe6D79QHmq15EA">
        <ownedComment xmi:id="_IPZt95YTEe6D79QHmq15EA">
          <body>Getter method for the list of adjacent towns.
     *
     * @return the list of adjacent towns</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOXzMJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IIiQ8JYTEe6D79QHmq15EA" name="toString" method="_IPHaEJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIiQ8ZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIi4A5YTEe6D79QHmq15EA" name="hashCode" method="_IPHaEpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIjfEJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INzLcJYTEe6D79QHmq15EA" name="Town" method="_IPGzBZYTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_INzLcpYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_INzLc5YTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedComment xmi:id="_IPZt9pYTEe6D79QHmq15EA">
          <body>Copy constructor.
     *
     * @param templateTown      an object of Town to copy</body>
        </ownedComment>
        <ownedParameter xmi:id="_INzLcZYTEe6D79QHmq15EA" name="templateTown" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INzLdJYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_INzygJYTEe6D79QHmq15EA" name="compareTo" method="_IPGzCpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_INzygZYTEe6D79QHmq15EA" name="town" type="_IIemkJYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_INzygpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOXzMZYTEe6D79QHmq15EA" name="equals" method="_IPHaFJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IOXzMpYTEe6D79QHmq15EA" name="town" type="_IOUv4JYTEe6D79QHmq15EA"/>
        <ownedParameter xmi:id="_IOYaQJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IIl7UJYTEe6D79QHmq15EA" name="TownGraphManager">
      <ownedComment xmi:id="_IPZt-JYTEe6D79QHmq15EA">
        <body> TownGraphManager manages towns and roads in a graph.
 It implements the TownGraphManagerInterface.
 
 @author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IO2UUJYTEe6D79QHmq15EA" name="graph" visibility="private" type="_IHehAJYTEe6D79QHmq15EA" association="_IPwTQZYTEe6D79QHmq15EA"/>
      <interfaceRealization xmi:id="_IN1nsZYTEe6D79QHmq15EA" client="_IIl7UJYTEe6D79QHmq15EA" supplier="_II3BEJYTEe6D79QHmq15EA" contract="_II3BEJYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPHaF5YTEe6D79QHmq15EA" name="TownGraphManager" specification="_IImiYJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPHaGJYTEe6D79QHmq15EA" type="_IIl7UJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>this.graph = new Graph();
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPHaGZYTEe6D79QHmq15EA" name="addRoad" specification="_IInJcJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPHaGpYTEe6D79QHmq15EA" name="name1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPHaG5YTEe6D79QHmq15EA" name="name2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPHaHJYTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPHaHZYTEe6D79QHmq15EA" name="road">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPHaHpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>Town town1 = getTown(name1);
     Town town2 = getTown(name2);
     
     if (town1 != null &amp;&amp; town2 != null) {
         graph.addEdge(town1, town2, distance, road);
         return true;
     }
     
     return false;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPHaH5YTEe6D79QHmq15EA" name="getRoad" specification="_IIoXkJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPHaIJYTEe6D79QHmq15EA" name="name1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPHaIZYTEe6D79QHmq15EA" name="name2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPHaIpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>Town town1 = getTown(name1);
     Town town2 = getTown(name2);
     
     if (town1 != null &amp;&amp; town2 != null) {
         Road road = graph.getEdge(town1, town2);
         if (road != null) {
             return road.getName();
         }
     }
     
     return null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIBIJYTEe6D79QHmq15EA" name="addTown" specification="_IIo-opYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIBIZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBIpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>Town town = new Town(name);
     
     if (!graph.containsVertex(town)) {
         graph.addVertex(town);
         return true;
     }
     
     return false;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIBI5YTEe6D79QHmq15EA" name="getTown" specification="_IIqMwJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIBJJYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBJZYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>for (Town town : graph.vertexSet()) {
         if (town.getName().equals(name)) {
             return town;
         }
     }
     
     return null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIBJpYTEe6D79QHmq15EA" name="containsTown" specification="_IIra4JYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIBJ5YTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBKJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>for (Town town : graph.vertexSet()) {
         if (town.getName().equals(name)) {
             return true;
         }
     }
     
     return false;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIBKZYTEe6D79QHmq15EA" name="containsRoadConnection" specification="_IIspAJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIBKpYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBK5YTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBLJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>Town source = getTown(town1);
     Town destination = getTown(town2);
     
     if (source != null &amp;&amp; destination != null) {
         return graph.containsEdge(source, destination);
     }
     
     return false;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIBLZYTEe6D79QHmq15EA" name="allRoads" specification="_IItQE5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIBLpYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>ArrayList&lt;String> roads = new ArrayList&lt;>();

     for (Road road : graph.edgeSet()) {
         roads.add(road.getName());
     }

     Collections.sort(roads);

     return roads;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIBL5YTEe6D79QHmq15EA" name="deleteRoadConnection" specification="_IIvFQJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIBMJYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBMZYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBMpYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIBM5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>Town source = getTown(town1);
     Town destination = getTown(town2);
     
     if (source != null &amp;&amp; destination != null) {
     	
         Road road = graph.getEdge(source, destination);
         
         if (road != null &amp;&amp; road.getName().equals(name)) {
             graph.removeEdge(source, destination, road.getWeight(), road.getName());
             return true;
         }
     }
     
     return false;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIoMJYTEe6D79QHmq15EA" name="deleteTown" specification="_IIwTYpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIoMZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIoMpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>Town town = getTown(name);
     
     if (town != null) {
         return graph.removeVertex(town);
     }
     
     return false;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIoM5YTEe6D79QHmq15EA" name="allTowns" specification="_IIxhgJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIoNJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>ArrayList&lt;String> towns = new ArrayList&lt;>();
     
     for (Town town : graph.vertexSet()) {
         towns.add(town.getName());
     }
     
     Collections.sort(towns);
     
     return towns;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIoNZYTEe6D79QHmq15EA" name="getPath" specification="_IIyIk5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIoNpYTEe6D79QHmq15EA" name="name1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIoN5YTEe6D79QHmq15EA" name="name2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPIoOJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
        <language>java</language>
        <body>Town town1 = getTown(name1);
     Town town2 = getTown(name2);

     if (town1 == null || town2 == null) {
         return null;
     }

     return graph.shortestPath(town1, town2);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPIoOZYTEe6D79QHmq15EA" name="populateTownGraph" specification="_IOaPcJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IPIoOpYTEe6D79QHmq15EA" name="file" type="_INK5UJYTEe6D79QHmq15EA"/>
        <language>java</language>
        <body>try (Scanner scanner = new Scanner(file)) {
 		
			while (scanner.hasNext()) {
				
				String[] elements = scanner.nextLine().split(&quot;;&quot;);
				
				String[] roadElements = elements[0].split(&quot;,&quot;);
				
				String roadName = roadElements[0];
				Integer distance = Integer.parseInt(roadElements[1]);
				
				String town1 = elements[1];
				String town2 = elements[2];
				
				graph.addVertex(new Town(town1));
				graph.addVertex(new Town(town2));
				
				Town source = getTown(town1);
		        Town destination = getTown(town2);
		        
		        if (source != null &amp;&amp; destination != null) {
		            graph.addEdge(source, destination, distance, roadName);
		        }
			}
		}
     
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IImiYJYTEe6D79QHmq15EA" name="TownGraphManager" method="_IPHaF5YTEe6D79QHmq15EA">
        <eAnnotations xmi:id="_IImiYZYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_IImiYpYTEe6D79QHmq15EA" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_IImiY5YTEe6D79QHmq15EA" type="_IIl7UJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IInJcJYTEe6D79QHmq15EA" name="addRoad" method="_IPHaGZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IInJcZYTEe6D79QHmq15EA" name="name1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IInJcpYTEe6D79QHmq15EA" name="name2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IInJc5YTEe6D79QHmq15EA" name="distance">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IInJdJYTEe6D79QHmq15EA" name="road">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IInJdZYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIoXkJYTEe6D79QHmq15EA" name="getRoad" method="_IPHaH5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIoXkZYTEe6D79QHmq15EA" name="name1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIoXkpYTEe6D79QHmq15EA" name="name2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIoXk5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIo-opYTEe6D79QHmq15EA" name="addTown" method="_IPIBIJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIo-o5YTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIplsJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIqMwJYTEe6D79QHmq15EA" name="getTown" method="_IPIBI5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIqMwZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IN1nspYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IIra4JYTEe6D79QHmq15EA" name="containsTown" method="_IPIBJpYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIra4ZYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIra4pYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIspAJYTEe6D79QHmq15EA" name="containsRoadConnection" method="_IPIBKZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIspAZYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIspApYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIspA5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IItQE5YTEe6D79QHmq15EA" name="allRoads" method="_IPIBLZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IOZoYJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IIvFQJYTEe6D79QHmq15EA" name="deleteRoadConnection" method="_IPIBL5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIvFQZYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIvFQpYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIvFQ5YTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIvsUJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIwTYpYTEe6D79QHmq15EA" name="deleteTown" method="_IPIoMJYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIwTY5YTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIw6cJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IIxhgJYTEe6D79QHmq15EA" name="allTowns" method="_IPIoM5YTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IOZoYZYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IIyIk5YTEe6D79QHmq15EA" name="getPath" method="_IPIoNZYTEe6D79QHmq15EA">
        <ownedParameter xmi:id="_IIyIlJYTEe6D79QHmq15EA" name="name1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IIyvoJYTEe6D79QHmq15EA" name="name2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOZoYpYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_IOaPcJYTEe6D79QHmq15EA" name="populateTownGraph" method="_IPIoOZYTEe6D79QHmq15EA" raisedException="_INLgYZYTEe6D79QHmq15EA _INGA0JYTEe6D79QHmq15EA">
        <ownedComment xmi:id="_IPZt-ZYTEe6D79QHmq15EA">
          <body>Populates the town graph with data from the given file.
     *
     * @param file         The file to read the town and road info from
     * 
     * @throws FileNotFoundException     If the specified file is not found
     * @throws IOException               If an error occurs while reading the file</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOaPcZYTEe6D79QHmq15EA" name="file" type="_INK5UJYTEe6D79QHmq15EA"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_II3BEJYTEe6D79QHmq15EA" name="TownGraphManagerInterface">
      <ownedOperation xmi:id="_II3oIJYTEe6D79QHmq15EA" name="addRoad">
        <ownedComment xmi:id="_IPaVAJYTEe6D79QHmq15EA">
          <body>Adds a road with 2 towns and a road name
	 * @param town1 name of town 1 (lastname, firstname)
	 * @param town2 name of town 2 (lastname, firstname)
	 * @param roadName name of road
	 * @return true if the road was added successfully</body>
        </ownedComment>
        <ownedParameter xmi:id="_II3oIZYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II4PMJYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II4PMZYTEe6D79QHmq15EA" name="weight">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II4PMpYTEe6D79QHmq15EA" name="roadName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II4PM5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II42QJYTEe6D79QHmq15EA" name="getRoad">
        <ownedComment xmi:id="_IPaVAZYTEe6D79QHmq15EA">
          <body>Returns the name of the road that both towns are connected through
	 * @param town1 name of town 1 (lastname, firstname)
	 * @param town2 name of town 2 (lastname, firstname)
	 * @return name of road if town 1 and town2 are in the same road, returns null if not</body>
        </ownedComment>
        <ownedParameter xmi:id="_II42QZYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II42QpYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II42Q5YTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II42RJYTEe6D79QHmq15EA" name="addTown">
        <ownedComment xmi:id="_IPaVApYTEe6D79QHmq15EA">
          <body>Adds a town to the graph
	 * @param v the town's name  (lastname, firstname)
	 * @return true if the town was successfully added, false if not</body>
        </ownedComment>
        <ownedParameter xmi:id="_II42RZYTEe6D79QHmq15EA" name="v">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II5dUJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II5dUZYTEe6D79QHmq15EA" name="getTown">
        <ownedComment xmi:id="_IPaVA5YTEe6D79QHmq15EA">
          <body>Gets a town with a given name
	 * @param name the town's name 
	 * @return the Town specified by the name, or null if town does not exist</body>
        </ownedComment>
        <ownedParameter xmi:id="_II5dUpYTEe6D79QHmq15EA" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IN210JYTEe6D79QHmq15EA" type="_IIemkJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_II5dU5YTEe6D79QHmq15EA" name="containsTown">
        <ownedComment xmi:id="_IPaVBJYTEe6D79QHmq15EA">
          <body>Determines if a town is already in the graph
	 * @param v the town's name 
	 * @return true if the town is in the graph, false if not</body>
        </ownedComment>
        <ownedParameter xmi:id="_II5dVJYTEe6D79QHmq15EA" name="v">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II6EYJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II6EYZYTEe6D79QHmq15EA" name="containsRoadConnection">
        <ownedComment xmi:id="_IPaVBZYTEe6D79QHmq15EA">
          <body>Determines if a road is in the graph
	 * @param town1 name of town 1 (lastname, firstname)
	 * @param town2 name of town 2 (lastname, firstname)
	 * @return true if the road is in the graph, false if not</body>
        </ownedComment>
        <ownedParameter xmi:id="_II6EYpYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II6EY5YTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II6EZJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II6EZZYTEe6D79QHmq15EA" name="allRoads">
        <ownedComment xmi:id="_IPaVBpYTEe6D79QHmq15EA">
          <body>Creates an arraylist of all road titles in sorted order by road name
	 * @return an arraylist of all road titles in sorted order by road name</body>
        </ownedComment>
        <ownedParameter xmi:id="_IOa2gJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_II7SgJYTEe6D79QHmq15EA" name="deleteRoadConnection">
        <ownedComment xmi:id="_IPaVB5YTEe6D79QHmq15EA">
          <body>Deletes a road from the graph
	 * @param town1 name of town 1 (lastname, firstname)
	 * @param town2 name of town 2 (lastname, firstname)
	 * @param roadName the road name
	 * @return true if the road was successfully deleted, false if not</body>
        </ownedComment>
        <ownedParameter xmi:id="_II7SgZYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II7SgpYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II7Sg5YTEe6D79QHmq15EA" name="road">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II7ShJYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II75kJYTEe6D79QHmq15EA" name="deleteTown">
        <ownedComment xmi:id="_IPaVCJYTEe6D79QHmq15EA">
          <body>Deletes a town from the graph
	 * @param v name of town (lastname, firstname)
	 * @return true if the town was successfully deleted, false if not</body>
        </ownedComment>
        <ownedParameter xmi:id="_II75kZYTEe6D79QHmq15EA" name="v">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II75kpYTEe6D79QHmq15EA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_II75k5YTEe6D79QHmq15EA" name="allTowns">
        <ownedComment xmi:id="_IPaVCZYTEe6D79QHmq15EA">
          <body>Creates an arraylist of all towns in alphabetical order (last name, first name)
	 * @return an arraylist of all towns in alphabetical order (last name, first name)</body>
        </ownedComment>
        <ownedParameter xmi:id="_IObdkJYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_II9HsJYTEe6D79QHmq15EA" name="getPath">
        <ownedComment xmi:id="_IPaVCpYTEe6D79QHmq15EA">
          <body>Returns the shortest path from town 1 to town 2
	 * @param town1 name of town 1 (lastname, firstname)
	 * @param town2 name of town 2 (lastname, firstname)
	 * @return an Arraylist of roads connecting the two towns together, null if the
	 * towns have no path to connect them.</body>
        </ownedComment>
        <ownedParameter xmi:id="_II9HsZYTEe6D79QHmq15EA" name="town1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_II9HspYTEe6D79QHmq15EA" name="town2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IObdkZYTEe6D79QHmq15EA" type="_INMHcJYTEe6D79QHmq15EA" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_II-84JYTEe6D79QHmq15EA" name="TownGraphManagerTest">
      <ownedAttribute xmi:id="_IO3icJYTEe6D79QHmq15EA" name="graph" visibility="private" type="_II3BEJYTEe6D79QHmq15EA" association="_IPw6UZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO3icpYTEe6D79QHmq15EA" name="town" visibility="private">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IO3ic5YTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPQJYTEe6D79QHmq15EA" name="setUp" specification="_IJALAJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = new TownGraphManager();
		  town = new String[12];
		  
		  for (int i = 1; i &lt; 12; i++) {
			  town[i] = &quot;Town_&quot; + i;
			  graph.addTown(town[i]);
		  }
		  
		  graph.addRoad(town[1], town[2], 2, &quot;Road_1&quot;);
		  graph.addRoad(town[1], town[3], 4, &quot;Road_2&quot;);
		  graph.addRoad(town[1], town[5], 6, &quot;Road_3&quot;);
		  graph.addRoad(town[3], town[7], 1, &quot;Road_4&quot;);
		  graph.addRoad(town[3], town[8], 2, &quot;Road_5&quot;);
		  graph.addRoad(town[4], town[8], 3, &quot;Road_6&quot;);
		  graph.addRoad(town[6], town[9], 3, &quot;Road_7&quot;);
		  graph.addRoad(town[9], town[10], 4, &quot;Road_8&quot;);
		  graph.addRoad(town[8], town[10], 2, &quot;Road_9&quot;);
		  graph.addRoad(town[5], town[10], 5, &quot;Road_10&quot;);
		  graph.addRoad(town[10], town[11], 3, &quot;Road_11&quot;);
		  graph.addRoad(town[2], town[11], 6, &quot;Road_12&quot;);
		 
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPQZYTEe6D79QHmq15EA" name="tearDown" specification="_IJAyEpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = null;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPQpYTEe6D79QHmq15EA" name="testAddRoad" specification="_IJCAMJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allRoads();
		assertEquals(&quot;Road_1&quot;, roads.get(0));
		assertEquals(&quot;Road_10&quot;, roads.get(1));
		assertEquals(&quot;Road_11&quot;, roads.get(2));
		assertEquals(&quot;Road_12&quot;, roads.get(3));
		graph.addRoad(town[4], town[11], 1,&quot;Road_13&quot;);
		roads = graph.allRoads();
		assertEquals(&quot;Road_1&quot;, roads.get(0));
		assertEquals(&quot;Road_10&quot;, roads.get(1));
		assertEquals(&quot;Road_11&quot;, roads.get(2));
		assertEquals(&quot;Road_12&quot;, roads.get(3));
		assertEquals(&quot;Road_13&quot;, roads.get(4));
		
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPQ5YTEe6D79QHmq15EA" name="testGetRoad" specification="_IJCnQpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Road_12&quot;, graph.getRoad(town[2], town[11]));
		assertEquals(&quot;Road_4&quot;, graph.getRoad(town[3], town[7]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPRJYTEe6D79QHmq15EA" name="testAddTown" specification="_IJCnRpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(false, graph.containsTown(&quot;Town_12&quot;));
		graph.addTown(&quot;Town_12&quot;);
		assertEquals(true, graph.containsTown(&quot;Town_12&quot;));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPRZYTEe6D79QHmq15EA" name="testDisjointGraph" specification="_IJDOU5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(false, graph.containsTown(&quot;Town_12&quot;));
		graph.addTown(&quot;Town_12&quot;);
		ArrayList&lt;String> path = graph.getPath(town[1],&quot;Town_12&quot;);
		assertFalse(path.size() > 0);
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPRpYTEe6D79QHmq15EA" name="testContainsTown" specification="_IJD1YpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsTown(&quot;Town_2&quot;));
		assertEquals(false, graph.containsTown(&quot;Town_12&quot;));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPR5YTEe6D79QHmq15EA" name="testContainsRoadConnection" specification="_IJD1ZpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsRoadConnection(town[2], town[11]));
		assertEquals(false, graph.containsRoadConnection(town[3], town[5]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPSJYTEe6D79QHmq15EA" name="testAllRoads" specification="_IJEcc5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allRoads();
		assertEquals(&quot;Road_1&quot;, roads.get(0));
		assertEquals(&quot;Road_10&quot;, roads.get(1));
		assertEquals(&quot;Road_11&quot;, roads.get(2));
		assertEquals(&quot;Road_8&quot;, roads.get(10));
		assertEquals(&quot;Road_9&quot;, roads.get(11));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPSZYTEe6D79QHmq15EA" name="testDeleteRoadConnection" specification="_IJEcd5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsRoadConnection(town[2], town[11]));
		graph.deleteRoadConnection(town[2], town[11], &quot;Road_12&quot;);
		assertEquals(false, graph.containsRoadConnection(town[2], town[11]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPSpYTEe6D79QHmq15EA" name="testDeleteTown" specification="_IJFDg5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsTown(&quot;Town_2&quot;));
		graph.deleteTown(town[2]);
		assertEquals(false, graph.containsTown(&quot;Town_2&quot;));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJPS5YTEe6D79QHmq15EA" name="testAllTowns" specification="_IJFqkpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allTowns();
		assertEquals(&quot;Town_1&quot;, roads.get(0));
		assertEquals(&quot;Town_10&quot;, roads.get(1));
		assertEquals(&quot;Town_11&quot;, roads.get(2));
		assertEquals(&quot;Town_2&quot;, roads.get(3));
		assertEquals(&quot;Town_8&quot;, roads.get(9));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2UJYTEe6D79QHmq15EA" name="testGetPath" specification="_IJFqlpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> path = graph.getPath(town[1],town[11]);
		  assertNotNull(path);
		  assertTrue(path.size() > 0);
		  assertEquals(&quot;Town_1 via Road_1 to Town_2 2 mi&quot;,path.get(0).trim());
		  assertEquals(&quot;Town_2 via Road_12 to Town_11 6 mi&quot;,path.get(1).trim());

	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2UZYTEe6D79QHmq15EA" name="testGetPathA" specification="_IJGRo5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> path = graph.getPath(town[1],town[10]);
		  assertNotNull(path);
		  assertTrue(path.size() > 0);
		  assertEquals(&quot;Town_1 via Road_2 to Town_3 4 mi&quot;,path.get(0).trim());
		  assertEquals(&quot;Town_3 via Road_5 to Town_8 2 mi&quot;,path.get(1).trim());
		  assertEquals(&quot;Town_8 via Road_9 to Town_10 2 mi&quot;,path.get(2).trim());
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2UpYTEe6D79QHmq15EA" name="testGetPathB" specification="_IJG4s5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> path = graph.getPath(town[1],town[6]);
		  assertNotNull(path);
		  assertTrue(path.size() > 0);
		  assertEquals(&quot;Town_1 via Road_2 to Town_3 4 mi&quot;,path.get(0).trim());
		  assertEquals(&quot;Town_3 via Road_5 to Town_8 2 mi&quot;,path.get(1).trim());
		  assertEquals(&quot;Town_8 via Road_9 to Town_10 2 mi&quot;,path.get(2).trim());
		  assertEquals(&quot;Town_10 via Road_8 to Town_9 4 mi&quot;,path.get(3).trim());
		  assertEquals(&quot;Town_9 via Road_7 to Town_6 3 mi&quot;,path.get(4).trim());

	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IJALAJYTEe6D79QHmq15EA" name="setUp" method="_IPJPQJYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJAyEpYTEe6D79QHmq15EA" name="tearDown" method="_IPJPQZYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJCAMJYTEe6D79QHmq15EA" name="testAddRoad" method="_IPJPQpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJCnQpYTEe6D79QHmq15EA" name="testGetRoad" method="_IPJPQ5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJCnRpYTEe6D79QHmq15EA" name="testAddTown" method="_IPJPRJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJDOU5YTEe6D79QHmq15EA" name="testDisjointGraph" method="_IPJPRZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJD1YpYTEe6D79QHmq15EA" name="testContainsTown" method="_IPJPRpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJD1ZpYTEe6D79QHmq15EA" name="testContainsRoadConnection" method="_IPJPR5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJEcc5YTEe6D79QHmq15EA" name="testAllRoads" method="_IPJPSJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJEcd5YTEe6D79QHmq15EA" name="testDeleteRoadConnection" method="_IPJPSZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJFDg5YTEe6D79QHmq15EA" name="testDeleteTown" method="_IPJPSpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJFqkpYTEe6D79QHmq15EA" name="testAllTowns" method="_IPJPS5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJFqlpYTEe6D79QHmq15EA" name="testGetPath" method="_IPJ2UJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJGRo5YTEe6D79QHmq15EA" name="testGetPathA" method="_IPJ2UZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJG4s5YTEe6D79QHmq15EA" name="testGetPathB" method="_IPJ2UpYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IJIt4JYTEe6D79QHmq15EA" name="TownGraphManager_GFA_Test">
      <ownedAttribute xmi:id="_IO4wkJYTEe6D79QHmq15EA" name="graph" visibility="private" type="_II3BEJYTEe6D79QHmq15EA" association="_IPxhYZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO5XoJYTEe6D79QHmq15EA" name="town" visibility="private">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IO5XoZYTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2U5YTEe6D79QHmq15EA" name="setUp" specification="_IJJ8AJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = new TownGraphManager();
		  town = new String[12];
		  
		  for (int i = 1; i &lt; 12; i++) {
			  town[i] = &quot;Town_&quot; + i;
			  graph.addTown(town[i]);
		  }
		  
		  graph.addRoad(town[1], town[2], 2, &quot;Road_1&quot;);
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2VJYTEe6D79QHmq15EA" name="tearDown" specification="_IJKjEpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = null;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2VZYTEe6D79QHmq15EA" name="testAddRoad" specification="_IJLxMJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allRoads();
		assertEquals(&quot;Road_1&quot;, roads.get(0));
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IJJ8AJYTEe6D79QHmq15EA" name="setUp" method="_IPJ2U5YTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJKjEpYTEe6D79QHmq15EA" name="tearDown" method="_IPJ2VJYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJLxMJYTEe6D79QHmq15EA" name="testAddRoad" method="_IPJ2VZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IJNmYJYTEe6D79QHmq15EA" name="TownGraphManager_STUDENT_Test">
      <ownedComment xmi:id="_IPaVC5YTEe6D79QHmq15EA">
        <body>The TownGraphManager_STUDENT_Test is used to test the methods of the TownGraphManager class.

@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IO5-sJYTEe6D79QHmq15EA" name="graph" visibility="private" type="_II3BEJYTEe6D79QHmq15EA" association="_IPxhZJYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO5-spYTEe6D79QHmq15EA" name="town" visibility="private">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_IO6lwJYTEe6D79QHmq15EA" value="*"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2VpYTEe6D79QHmq15EA" name="setUp" specification="_IJONcJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = new TownGraphManager();
		  town = new String[16];
		  
		  for (int i = 1; i &lt; 15; i++) {
			  town[i] = &quot;Town_&quot; + i;
			  graph.addTown(town[i]);
		  }
		  
		  graph.addRoad(town[1], town[3], 15, &quot;Road_A&quot;);
		  graph.addRoad(town[1], town[5], 14, &quot;Road_B&quot;);
		  graph.addRoad(town[1], town[7], 13, &quot;Road_C&quot;);
		  graph.addRoad(town[1], town[9], 12, &quot;Road_D&quot;);
		  graph.addRoad(town[2], town[11], 11, &quot;Road_E&quot;);
		  graph.addRoad(town[2], town[13], 10, &quot;Road_F&quot;);
		  graph.addRoad(town[2], town[14], 9, &quot;Road_G&quot;);
		  graph.addRoad(town[2], town[1], 8, &quot;Road_H&quot;);
		  graph.addRoad(town[3], town[4], 7, &quot;Road_I&quot;);
		  graph.addRoad(town[4], town[14], 2, &quot;Road_J&quot;);
		  graph.addRoad(town[6], town[14], 6, &quot;Road_K&quot;);
		  graph.addRoad(town[7], town[8], 5, &quot;Road_L&quot;);
		  graph.addRoad(town[10], town[14], 4, &quot;Road_M&quot;);
		  graph.addRoad(town[12], town[6], 1, &quot;Road_N&quot;);
		  graph.addRoad(town[12], town[13], 3, &quot;Road_O&quot;);
		 
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPJ2V5YTEe6D79QHmq15EA" name="tearDown" specification="_IJO0gJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>graph = null;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdYJYTEe6D79QHmq15EA" name="testAddRoad" specification="_IJPbkJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allRoads();
		assertEquals(&quot;Road_A&quot;, roads.get(0));
		assertEquals(&quot;Road_B&quot;, roads.get(1));
		assertEquals(&quot;Road_C&quot;, roads.get(2));
		assertEquals(&quot;Road_D&quot;, roads.get(3));
		graph.addRoad(town[4], town[11], 1,&quot;Road_P&quot;);
		roads = graph.allRoads();
		assertEquals(&quot;Road_A&quot;, roads.get(0));
		assertEquals(&quot;Road_B&quot;, roads.get(1));
		assertEquals(&quot;Road_C&quot;, roads.get(2));
		assertEquals(&quot;Road_D&quot;, roads.get(3));
		assertEquals(&quot;Road_P&quot;, roads.get(15));
		
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdYZYTEe6D79QHmq15EA" name="testGetRoad" specification="_IJQCopYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Road_J&quot;, graph.getRoad(town[4], town[14]));
		assertEquals(&quot;Road_M&quot;, graph.getRoad(town[10], town[14]));
		assertEquals(&quot;Road_A&quot;, graph.getRoad(town[1], town[3]));
		assertEquals(&quot;Road_C&quot;, graph.getRoad(town[1], town[7]));
		assertEquals(&quot;Road_K&quot;, graph.getRoad(town[6], town[14]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdYpYTEe6D79QHmq15EA" name="testAddTown" specification="_IJQCppYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(false, graph.containsTown(&quot;Town_15&quot;));
		graph.addTown(&quot;Town_15&quot;);
		assertEquals(true, graph.containsTown(&quot;Town_15&quot;));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdY5YTEe6D79QHmq15EA" name="testDisjointGraph" specification="_IJRQwJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(false, graph.containsTown(&quot;Town_15&quot;));
		graph.addTown(&quot;Town_15&quot;);
		ArrayList&lt;String> path = graph.getPath(town[1],&quot;Town_15&quot;);
		assertFalse(path.size() > 0);
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdZJYTEe6D79QHmq15EA" name="testContainsTown" specification="_IJR30JYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsTown(&quot;Town_2&quot;));
		assertEquals(false, graph.containsTown(&quot;Town_16&quot;));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdZZYTEe6D79QHmq15EA" name="testContainsRoadConnection" specification="_IJSe4JYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsRoadConnection(town[7], town[8]));
		assertEquals(false, graph.containsRoadConnection(town[12], town[14]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdZpYTEe6D79QHmq15EA" name="testAllRoads" specification="_IJTF8JYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allRoads();
		assertEquals(&quot;Road_A&quot;, roads.get(0));
		assertEquals(&quot;Road_B&quot;, roads.get(1));
		assertEquals(&quot;Road_C&quot;, roads.get(2));
		assertEquals(&quot;Road_D&quot;, roads.get(3));
		assertEquals(&quot;Road_E&quot;, roads.get(4));
		assertEquals(&quot;Road_F&quot;, roads.get(5));
		assertEquals(&quot;Road_G&quot;, roads.get(6));
		assertEquals(&quot;Road_H&quot;, roads.get(7));
		assertEquals(&quot;Road_I&quot;, roads.get(8));
		assertEquals(&quot;Road_J&quot;, roads.get(9));
		assertEquals(&quot;Road_K&quot;, roads.get(10));
		assertEquals(&quot;Road_L&quot;, roads.get(11));
		assertEquals(&quot;Road_M&quot;, roads.get(12));
		assertEquals(&quot;Road_N&quot;, roads.get(13));
		assertEquals(&quot;Road_O&quot;, roads.get(14));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdZ5YTEe6D79QHmq15EA" name="testDeleteRoadConnection" specification="_IJTtAZYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsRoadConnection(town[12], town[13]));
		graph.deleteRoadConnection(town[12], town[13], &quot;Road_O&quot;);
		assertEquals(false, graph.containsRoadConnection(town[12], town[13]));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdaJYTEe6D79QHmq15EA" name="testDeleteTown" specification="_IJUUE5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(true, graph.containsTown(&quot;Town_5&quot;));
		graph.deleteTown(town[5]);
		assertEquals(false, graph.containsTown(&quot;Town_5&quot;));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPKdaZYTEe6D79QHmq15EA" name="testAllTowns" specification="_IJU7IpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> roads = graph.allTowns();
		assertEquals(&quot;Town_1&quot;, roads.get(0));
		assertEquals(&quot;Town_10&quot;, roads.get(1));
		assertEquals(&quot;Town_11&quot;, roads.get(2));
		assertEquals(&quot;Town_12&quot;, roads.get(3));
		assertEquals(&quot;Town_13&quot;, roads.get(4));
		assertEquals(&quot;Town_14&quot;, roads.get(5));
		assertEquals(&quot;Town_2&quot;, roads.get(6));
		assertEquals(&quot;Town_3&quot;, roads.get(7));
		assertEquals(&quot;Town_4&quot;, roads.get(8));
		assertEquals(&quot;Town_5&quot;, roads.get(9));
		assertEquals(&quot;Town_6&quot;, roads.get(10));
		assertEquals(&quot;Town_7&quot;, roads.get(11));
		assertEquals(&quot;Town_8&quot;, roads.get(12));
		assertEquals(&quot;Town_9&quot;, roads.get(13));
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLEcJYTEe6D79QHmq15EA" name="testGetPath1" specification="_IJViMpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> path = graph.getPath(town[11],town[13]);
		  assertNotNull(path);
		  assertTrue(path.size() > 0);
		  assertEquals(&quot;Town_11 via Road_E to Town_2 11 mi&quot;,path.get(0).trim());
		  assertEquals(&quot;Town_2 via Road_F to Town_13 10 mi&quot;,path.get(1).trim());

	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLEcZYTEe6D79QHmq15EA" name="testGetPath2" specification="_IJWJQpYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> path = graph.getPath(town[2],town[8]);
		  assertNotNull(path);
		  assertTrue(path.size() > 0);
		  assertEquals(&quot;Town_2 via Road_H to Town_1 8 mi&quot;,path.get(0).trim());
		  assertEquals(&quot;Town_1 via Road_C to Town_7 13 mi&quot;,path.get(1).trim());
		  assertEquals(&quot;Town_7 via Road_L to Town_8 5 mi&quot;,path.get(2).trim());
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLEcpYTEe6D79QHmq15EA" name="testGetPath3" specification="_IJXXYJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>ArrayList&lt;String> path = graph.getPath(town[1],town[6]);
		  assertNotNull(path);
		  assertTrue(path.size() > 0);
		  assertEquals(&quot;Town_1 via Road_H to Town_2 8 mi&quot;,path.get(0).trim());
		  assertEquals(&quot;Town_2 via Road_F to Town_13 10 mi&quot;,path.get(1).trim());
		  assertEquals(&quot;Town_13 via Road_O to Town_12 3 mi&quot;,path.get(2).trim());
		  assertEquals(&quot;Town_12 via Road_N to Town_6 1 mi&quot;,path.get(3).trim());
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IJONcJYTEe6D79QHmq15EA" name="setUp" method="_IPJ2VpYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJO0gJYTEe6D79QHmq15EA" name="tearDown" method="_IPJ2V5YTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJPbkJYTEe6D79QHmq15EA" name="testAddRoad" method="_IPKdYJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJQCopYTEe6D79QHmq15EA" name="testGetRoad" method="_IPKdYZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJQCppYTEe6D79QHmq15EA" name="testAddTown" method="_IPKdYpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJRQwJYTEe6D79QHmq15EA" name="testDisjointGraph" method="_IPKdY5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJR30JYTEe6D79QHmq15EA" name="testContainsTown" method="_IPKdZJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJSe4JYTEe6D79QHmq15EA" name="testContainsRoadConnection" method="_IPKdZZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJTF8JYTEe6D79QHmq15EA" name="testAllRoads" method="_IPKdZpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJTtAZYTEe6D79QHmq15EA" name="testDeleteRoadConnection" method="_IPKdZ5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJUUE5YTEe6D79QHmq15EA" name="testDeleteTown" method="_IPKdaJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJU7IpYTEe6D79QHmq15EA" name="testAllTowns" method="_IPKdaZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJViMpYTEe6D79QHmq15EA" name="testGetPath1" method="_IPLEcJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJWJQpYTEe6D79QHmq15EA" name="testGetPath2" method="_IPLEcZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJXXYJYTEe6D79QHmq15EA" name="testGetPath3" method="_IPLEcpYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IJYlgJYTEe6D79QHmq15EA" name="Town_STUDENT_Test">
      <ownedComment xmi:id="_IPa8EJYTEe6D79QHmq15EA">
        <body>The Town_STUDENT_Test class is used to test the methods of the Town class.

@author Mariia Honcharenko</body>
      </ownedComment>
      <ownedAttribute xmi:id="_IO7M0JYTEe6D79QHmq15EA" name="townA" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPyIcZYTEe6D79QHmq15EA"/>
      <ownedAttribute xmi:id="_IO7M0pYTEe6D79QHmq15EA" name="townB" visibility="private" type="_IIemkJYTEe6D79QHmq15EA" association="_IPyvgZYTEe6D79QHmq15EA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLEc5YTEe6D79QHmq15EA" name="setUp" specification="_IJZMkJYTEe6D79QHmq15EA">
        <language>java</language>
        <body>townA = new Town(&quot;Dnipro&quot;);
     townB = new Town(&quot;Paris&quot;);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLEdJYTEe6D79QHmq15EA" name="tearDown" specification="_IJZzopYTEe6D79QHmq15EA">
        <language>java</language>
        <body>townA = null;
     townB = null;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLEdZYTEe6D79QHmq15EA" name="testTownConstructor" specification="_IJaaspYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Dnipro&quot;, townA.getName());
     assertTrue(townA.getAdjTowns().isEmpty());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrgJYTEe6D79QHmq15EA" name="testTownCopyConstructor" specification="_IJbBw5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>Town copiedTown = new Town(townA);
     assertEquals(townA.getName(), copiedTown.getName());
     assertEquals(townA.getAdjTowns().size(), copiedTown.getAdjTowns().size());
     assertTrue(copiedTown.getAdjTowns().isEmpty());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrgZYTEe6D79QHmq15EA" name="testGetName" specification="_IJbo05YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Dnipro&quot;, townA.getName());
     assertEquals(&quot;Paris&quot;, townB.getName());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrgpYTEe6D79QHmq15EA" name="testGetAdjTowns" specification="_IJcP45YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(0, townA.getAdjTowns().size());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrg5YTEe6D79QHmq15EA" name="testCompareTo" specification="_IJc28pYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertTrue(townA.compareTo(townB) &lt; 0);
     assertTrue(townB.compareTo(townA) > 0);
     assertTrue(townA.compareTo(new Town(&quot;Dnipro&quot;)) == 0);
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrhJYTEe6D79QHmq15EA" name="testToString" specification="_IJc29pYTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Dnipro&quot;, townA.toString());
     assertEquals(&quot;Paris&quot;, townB.toString());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrhZYTEe6D79QHmq15EA" name="testHashCode" specification="_IJdeA5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertEquals(&quot;Dnipro&quot;.hashCode(), townA.hashCode());
     assertEquals(&quot;Paris&quot;.hashCode(), townB.hashCode());
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPLrhpYTEe6D79QHmq15EA" name="testEquals" specification="_IJeFE5YTEe6D79QHmq15EA">
        <language>java</language>
        <body>assertTrue(townA.equals(townA));
     assertTrue(townA.equals(new Town(&quot;Dnipro&quot;)));
     assertFalse(townA.equals(townB));
     assertFalse(townA.equals(null));
     assertFalse(townA.equals(&quot;Dnipro&quot;));
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IJZMkJYTEe6D79QHmq15EA" name="setUp" method="_IPLEc5YTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJZzopYTEe6D79QHmq15EA" name="tearDown" method="_IPLEdJYTEe6D79QHmq15EA" raisedException="_IOB08JYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJaaspYTEe6D79QHmq15EA" name="testTownConstructor" method="_IPLEdZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJbBw5YTEe6D79QHmq15EA" name="testTownCopyConstructor" method="_IPLrgJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJbo05YTEe6D79QHmq15EA" name="testGetName" method="_IPLrgZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJcP45YTEe6D79QHmq15EA" name="testGetAdjTowns" method="_IPLrgpYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJc28pYTEe6D79QHmq15EA" name="testCompareTo" method="_IPLrg5YTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJc29pYTEe6D79QHmq15EA" name="testToString" method="_IPLrhJYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJdeA5YTEe6D79QHmq15EA" name="testHashCode" method="_IPLrhZYTEe6D79QHmq15EA"/>
      <ownedOperation xmi:id="_IJeFE5YTEe6D79QHmq15EA" name="testEquals" method="_IPLrhpYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPi34JYTEe6D79QHmq15EA" name="" memberEnd="_IPi34ZYTEe6D79QHmq15EA _IOfvAJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPi34ZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPi34JYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPje8ZYTEe6D79QHmq15EA" name="" memberEnd="_IPje8pYTEe6D79QHmq15EA _IOg9IJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPje8pYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPje8ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPkGAZYTEe6D79QHmq15EA" name="" memberEnd="_IPkGApYTEe6D79QHmq15EA _IOhkMZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPkGApYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPkGAZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPkGBJYTEe6D79QHmq15EA" name="" memberEnd="_IPkGBZYTEe6D79QHmq15EA _IOiLQJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPkGBZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPkGBJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPktEZYTEe6D79QHmq15EA" name="" memberEnd="_IPktEpYTEe6D79QHmq15EA _IOjZYJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPktEpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPktEZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPlUIZYTEe6D79QHmq15EA" name="" memberEnd="_IPlUIpYTEe6D79QHmq15EA _IOkAcZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPlUIpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPlUIZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPl7MJYTEe6D79QHmq15EA" name="" memberEnd="_IPl7MZYTEe6D79QHmq15EA _IOkngpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPl7MZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPl7MJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPl7M5YTEe6D79QHmq15EA" name="" memberEnd="_IPl7NJYTEe6D79QHmq15EA _IOl1oJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPl7NJYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPl7M5YTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPmiQZYTEe6D79QHmq15EA" name="" memberEnd="_IPmiQpYTEe6D79QHmq15EA _IOnDwZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPmiQpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPmiQZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPnJUZYTEe6D79QHmq15EA" name="" memberEnd="_IPnJUpYTEe6D79QHmq15EA _IOnq0ZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPnJUpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPnJUZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPnwYJYTEe6D79QHmq15EA" name="" memberEnd="_IPnwYZYTEe6D79QHmq15EA _IOnq05YTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPnwYZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPnwYJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPnwY5YTEe6D79QHmq15EA" name="" memberEnd="_IPnwZJYTEe6D79QHmq15EA _IOo48JYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPnwZJYTEe6D79QHmq15EA" name="" type="_IHehAJYTEe6D79QHmq15EA" association="_IPnwY5YTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPoXcZYTEe6D79QHmq15EA" name="" memberEnd="_IPoXcpYTEe6D79QHmq15EA _IOpgApYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPoXcpYTEe6D79QHmq15EA" name="" type="_IHehAJYTEe6D79QHmq15EA" association="_IPoXcZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPo-gZYTEe6D79QHmq15EA" name="" memberEnd="_IPo-gpYTEe6D79QHmq15EA _IOquIZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPo-gpYTEe6D79QHmq15EA" name="" type="_IHehAJYTEe6D79QHmq15EA" association="_IPo-gZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPplkZYTEe6D79QHmq15EA" name="" memberEnd="_IPplkpYTEe6D79QHmq15EA _IOr8QJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPplkpYTEe6D79QHmq15EA" name="" type="_IHzRIJYTEe6D79QHmq15EA" association="_IPplkZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPqMoJYTEe6D79QHmq15EA" name="" memberEnd="_IPqMoZYTEe6D79QHmq15EA _IOtKYpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPqMoZYTEe6D79QHmq15EA" name="" type="_IHzRIJYTEe6D79QHmq15EA" association="_IPqMoJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPqMo5YTEe6D79QHmq15EA" name="" memberEnd="_IPqMpJYTEe6D79QHmq15EA _IOuYgJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPqMpJYTEe6D79QHmq15EA" name="" type="_IH-3UJYTEe6D79QHmq15EA" association="_IPqMo5YTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPqzsZYTEe6D79QHmq15EA" name="" memberEnd="_IPqzspYTEe6D79QHmq15EA _IOvmoZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPqzspYTEe6D79QHmq15EA" name="" type="_IH-3UJYTEe6D79QHmq15EA" association="_IPqzsZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPrawZYTEe6D79QHmq15EA" name="" memberEnd="_IPrawpYTEe6D79QHmq15EA _IOw0wZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPrawpYTEe6D79QHmq15EA" name="" type="_IIDv0JYTEe6D79QHmq15EA" association="_IPrawZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPsB0ZYTEe6D79QHmq15EA" name="" memberEnd="_IPsB0pYTEe6D79QHmq15EA _IOyC4JYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPsB0pYTEe6D79QHmq15EA" name="" type="_IIDv0JYTEe6D79QHmq15EA" association="_IPsB0ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPso4ZYTEe6D79QHmq15EA" name="" memberEnd="_IPso4pYTEe6D79QHmq15EA _IOyp8JYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPso4pYTEe6D79QHmq15EA" name="" type="_IIOu8JYTEe6D79QHmq15EA" association="_IPso4ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPtP8ZYTEe6D79QHmq15EA" name="" memberEnd="_IPtP8pYTEe6D79QHmq15EA _IOyp8pYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPtP8pYTEe6D79QHmq15EA" name="" type="_IIOu8JYTEe6D79QHmq15EA" association="_IPtP8ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPt3AZYTEe6D79QHmq15EA" name="" memberEnd="_IPt3ApYTEe6D79QHmq15EA _IOz4EJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPt3ApYTEe6D79QHmq15EA" name="" type="_IIVcoJYTEe6D79QHmq15EA" association="_IPt3AZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPueEZYTEe6D79QHmq15EA" name="" memberEnd="_IPueEpYTEe6D79QHmq15EA _IOz4EpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPueEpYTEe6D79QHmq15EA" name="" type="_IIVcoJYTEe6D79QHmq15EA" association="_IPueEZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPueFJYTEe6D79QHmq15EA" name="" memberEnd="_IPueFZYTEe6D79QHmq15EA _IO0fIZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPueFZYTEe6D79QHmq15EA" name="" type="_IIVcoJYTEe6D79QHmq15EA" association="_IPueFJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPvFIZYTEe6D79QHmq15EA" name="" memberEnd="_IPvFIpYTEe6D79QHmq15EA _IO0fI5YTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPvFIpYTEe6D79QHmq15EA" name="" type="_IIVcoJYTEe6D79QHmq15EA" association="_IPvFIZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPvsMZYTEe6D79QHmq15EA" name="" memberEnd="_IPvsMpYTEe6D79QHmq15EA _IO0fJZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPvsMpYTEe6D79QHmq15EA" name="" type="_IIVcoJYTEe6D79QHmq15EA" association="_IPvsMZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPvsNJYTEe6D79QHmq15EA" name="" memberEnd="_IPvsNZYTEe6D79QHmq15EA _IO1tQJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPvsNZYTEe6D79QHmq15EA" name="" type="_IIemkJYTEe6D79QHmq15EA" association="_IPvsNJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPwTQZYTEe6D79QHmq15EA" name="" memberEnd="_IPwTQpYTEe6D79QHmq15EA _IO2UUJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPwTQpYTEe6D79QHmq15EA" name="" type="_IIl7UJYTEe6D79QHmq15EA" association="_IPwTQZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPw6UZYTEe6D79QHmq15EA" name="" memberEnd="_IPw6UpYTEe6D79QHmq15EA _IO3icJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPw6UpYTEe6D79QHmq15EA" name="" type="_II-84JYTEe6D79QHmq15EA" association="_IPw6UZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPxhYZYTEe6D79QHmq15EA" name="" memberEnd="_IPxhYpYTEe6D79QHmq15EA _IO4wkJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPxhYpYTEe6D79QHmq15EA" name="" type="_IJIt4JYTEe6D79QHmq15EA" association="_IPxhYZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPxhZJYTEe6D79QHmq15EA" name="" memberEnd="_IPxhZZYTEe6D79QHmq15EA _IO5-sJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPxhZZYTEe6D79QHmq15EA" name="" type="_IJNmYJYTEe6D79QHmq15EA" association="_IPxhZJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPyIcZYTEe6D79QHmq15EA" name="" memberEnd="_IPyIcpYTEe6D79QHmq15EA _IO7M0JYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPyIcpYTEe6D79QHmq15EA" name="" type="_IJYlgJYTEe6D79QHmq15EA" association="_IPyIcZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPyvgZYTEe6D79QHmq15EA" name="" memberEnd="_IPyvgpYTEe6D79QHmq15EA _IO7M0pYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPyvgpYTEe6D79QHmq15EA" name="" type="_IJYlgJYTEe6D79QHmq15EA" association="_IPyvgZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPyvhJYTEe6D79QHmq15EA" name="" memberEnd="_IPyvhZYTEe6D79QHmq15EA _IPOHwJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPyvhZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPyvhJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPzWkZYTEe6D79QHmq15EA" name="" memberEnd="_IPzWkpYTEe6D79QHmq15EA _IPOu0pYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPzWkpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPzWkZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IPz9oZYTEe6D79QHmq15EA" name="" memberEnd="_IPz9opYTEe6D79QHmq15EA _IPPV4ZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IPz9opYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IPz9oZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP0ksJYTEe6D79QHmq15EA" name="" memberEnd="_IP0ksZYTEe6D79QHmq15EA _IPPV5JYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP0ksZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP0ksJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP0ks5YTEe6D79QHmq15EA" name="" memberEnd="_IP0ktJYTEe6D79QHmq15EA _IPPV55YTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP0ktJYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP0ks5YTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP1LwZYTEe6D79QHmq15EA" name="" memberEnd="_IP1LwpYTEe6D79QHmq15EA _IPP88pYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP1LwpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP1LwZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP1y0ZYTEe6D79QHmq15EA" name="" memberEnd="_IP1y0pYTEe6D79QHmq15EA _IPP89ZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP1y0pYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP1y0ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP2Z4ZYTEe6D79QHmq15EA" name="" memberEnd="_IP2Z4pYTEe6D79QHmq15EA _IPQkAJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP2Z4pYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP2Z4ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP3A8ZYTEe6D79QHmq15EA" name="" memberEnd="_IP3A8pYTEe6D79QHmq15EA _IPQkA5YTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP3A8pYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP3A8ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP3oAZYTEe6D79QHmq15EA" name="" memberEnd="_IP3oApYTEe6D79QHmq15EA _IPRLEpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP3oApYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP3oAZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP4PEZYTEe6D79QHmq15EA" name="" memberEnd="_IP4PEpYTEe6D79QHmq15EA _IPRLFZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP4PEpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP4PEZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP42IZYTEe6D79QHmq15EA" name="" memberEnd="_IP42IpYTEe6D79QHmq15EA _IPRyIZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP42IpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP42IZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP42JJYTEe6D79QHmq15EA" name="" memberEnd="_IP42JZYTEe6D79QHmq15EA _IPRyJJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP42JZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP42JJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP5dMZYTEe6D79QHmq15EA" name="" memberEnd="_IP5dMpYTEe6D79QHmq15EA _IPSZMJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP5dMpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP5dMZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP6EQZYTEe6D79QHmq15EA" name="" memberEnd="_IP6EQpYTEe6D79QHmq15EA _IPSZM5YTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP6EQpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP6EQZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP6ERJYTEe6D79QHmq15EA" name="" memberEnd="_IP6ERZYTEe6D79QHmq15EA _IPSZNpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP6ERZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP6ERJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP6rUZYTEe6D79QHmq15EA" name="" memberEnd="_IP6rUpYTEe6D79QHmq15EA _IPTAQpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP6rUpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP6rUZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP7SYZYTEe6D79QHmq15EA" name="" memberEnd="_IP7SYpYTEe6D79QHmq15EA _IPTnUpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP7SYpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP7SYZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP75cZYTEe6D79QHmq15EA" name="" memberEnd="_IP75cpYTEe6D79QHmq15EA _IPTnVZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP75cpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP75cZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP75dJYTEe6D79QHmq15EA" name="" memberEnd="_IP75dZYTEe6D79QHmq15EA _IPUOYpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP75dZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP75dJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP8ggZYTEe6D79QHmq15EA" name="" memberEnd="_IP8ggpYTEe6D79QHmq15EA _IPUOZZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP8ggpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP8ggZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP9HkZYTEe6D79QHmq15EA" name="" memberEnd="_IP9HkpYTEe6D79QHmq15EA _IPU1cZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP9HkpYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP9HkZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP9HlJYTEe6D79QHmq15EA" name="" memberEnd="_IP9HlZYTEe6D79QHmq15EA _IPU1dJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP9HlZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP9HlJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP9uoZYTEe6D79QHmq15EA" name="" memberEnd="_IP9uopYTEe6D79QHmq15EA _IPVcgpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP9uopYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP9uoZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP-VsZYTEe6D79QHmq15EA" name="" memberEnd="_IP-VspYTEe6D79QHmq15EA _IPVchZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP-VspYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP-VsZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP-8wJYTEe6D79QHmq15EA" name="" memberEnd="_IP-8wZYTEe6D79QHmq15EA _IPWDkpYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP-8wZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP-8wJYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IP_j0ZYTEe6D79QHmq15EA" name="" memberEnd="_IP_j0pYTEe6D79QHmq15EA _IPWDlZYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IP_j0pYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IP_j0ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IQAK4JYTEe6D79QHmq15EA" name="" memberEnd="_IQAK4ZYTEe6D79QHmq15EA _IPWqopYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IQAK4ZYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IQAK4JYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IQAx8ZYTEe6D79QHmq15EA" name="" memberEnd="_IQAx8pYTEe6D79QHmq15EA _IPXRsJYTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IQAx8pYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IQAx8ZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_IQBZAZYTEe6D79QHmq15EA" name="" memberEnd="_IQBZApYTEe6D79QHmq15EA _IPXRs5YTEe6D79QHmq15EA">
      <ownedEnd xmi:id="_IQBZApYTEe6D79QHmq15EA" name="" type="_IHV-IJYTEe6D79QHmq15EA" association="_IQBZAZYTEe6D79QHmq15EA"/>
    </packagedElement>
    <profileApplication xmi:id="_H2dpgJYTEe6D79QHmq15EA">
      <eAnnotations xmi:id="_H2dpgZYTEe6D79QHmq15EA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_H2dpgpYTEe6D79QHmq15EA" base_Package="_HwJmIJYTEe6D79QHmq15EA">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IHhkUJYTEe6D79QHmq15EA" base_Element="_IHg9QJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IHiLYJYTEe6D79QHmq15EA" base_Element="_IHg9QJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IHiLYZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IHkAkZYTEe6D79QHmq15EA" base_Element="_IHjZgJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IHknoJYTEe6D79QHmq15EA" base_Element="_IHjZgJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IHknoZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_IHrVUJYTEe6D79QHmq15EA" genericsValue="V, E" base_Element="_IHquQJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH0fQJYTEe6D79QHmq15EA" base_Element="_IHz4MJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH0fQZYTEe6D79QHmq15EA" base_Element="_IHz4MJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH0fQpYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH1GUZYTEe6D79QHmq15EA" base_Element="_IH1GUJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH1GUpYTEe6D79QHmq15EA" base_Element="_IH1GUJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH1tYJYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH1tYpYTEe6D79QHmq15EA" base_Element="_IH1tYZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH2UcJYTEe6D79QHmq15EA" base_Element="_IH1tYZYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH2UcZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH2Uc5YTEe6D79QHmq15EA" base_Element="_IH2UcpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH27gJYTEe6D79QHmq15EA" base_Element="_IH2UcpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH27gZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH3ikJYTEe6D79QHmq15EA" base_Element="_IH27gpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH3ikZYTEe6D79QHmq15EA" base_Element="_IH27gpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH3ikpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH4JoZYTEe6D79QHmq15EA" base_Element="_IH4JoJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH4wsJYTEe6D79QHmq15EA" base_Element="_IH4JoJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH4wsZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH4ws5YTEe6D79QHmq15EA" base_Element="_IH4wspYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH5XwJYTEe6D79QHmq15EA" base_Element="_IH4wspYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH5XwZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH5Xw5YTEe6D79QHmq15EA" base_Element="_IH5XwpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH5-0JYTEe6D79QHmq15EA" base_Element="_IH5XwpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH5-0ZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH6l4JYTEe6D79QHmq15EA" base_Element="_IH5-0pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH6l4ZYTEe6D79QHmq15EA" base_Element="_IH5-0pYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH6l4pYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH7M8ZYTEe6D79QHmq15EA" base_Element="_IH7M8JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH7M8pYTEe6D79QHmq15EA" base_Element="_IH7M8JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH70AJYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH70ApYTEe6D79QHmq15EA" base_Element="_IH70AZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH70A5YTEe6D79QHmq15EA" base_Element="_IH70AZYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH70BJYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH8bEZYTEe6D79QHmq15EA" base_Element="_IH8bEJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH8bEpYTEe6D79QHmq15EA" base_Element="_IH8bEJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH8bE5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH9CIJYTEe6D79QHmq15EA" base_Element="_IH8bFJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH9CIZYTEe6D79QHmq15EA" base_Element="_IH8bFJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IH9CIpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH9CJJYTEe6D79QHmq15EA" base_Element="_IH9CI5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH9CJZYTEe6D79QHmq15EA" base_Element="_IH9CI5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IH9CJpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IH9pMJYTEe6D79QHmq15EA" base_Element="_IH9CJ5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IH9pMZYTEe6D79QHmq15EA" base_Element="_IH9CJ5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IH9pMpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIAFcJYTEe6D79QHmq15EA" base_Element="_IH_eYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIAFcZYTEe6D79QHmq15EA" base_Element="_IH_eYJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIAFcpYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIAsgJYTEe6D79QHmq15EA" base_Element="_IIAFc5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIAsgZYTEe6D79QHmq15EA" base_Element="_IIAFc5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIAsgpYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIB6oJYTEe6D79QHmq15EA" base_Element="_IIBTkJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIB6oZYTEe6D79QHmq15EA" base_Element="_IIBTkJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIB6opYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIE98JYTEe6D79QHmq15EA" base_Element="_IIEW4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIE98ZYTEe6D79QHmq15EA" base_Element="_IIEW4JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIE98pYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIFlAZYTEe6D79QHmq15EA" base_Element="_IIFlAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIGMEJYTEe6D79QHmq15EA" base_Element="_IIFlAJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIGMEZYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIGME5YTEe6D79QHmq15EA" base_Element="_IIGMEpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIGzIJYTEe6D79QHmq15EA" base_Element="_IIGMEpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIGzIZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIGzI5YTEe6D79QHmq15EA" base_Element="_IIGzIpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIHaMJYTEe6D79QHmq15EA" base_Element="_IIGzIpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIHaMZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIHaM5YTEe6D79QHmq15EA" base_Element="_IIHaMpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIIBQJYTEe6D79QHmq15EA" base_Element="_IIHaMpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIIBQZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIIBQ5YTEe6D79QHmq15EA" base_Element="_IIIBQpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIIoUJYTEe6D79QHmq15EA" base_Element="_IIIBQpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIIoUZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIIoU5YTEe6D79QHmq15EA" base_Element="_IIIoUpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIIoVJYTEe6D79QHmq15EA" base_Element="_IIIoUpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIIoVZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIJPYZYTEe6D79QHmq15EA" base_Element="_IIJPYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIJPYpYTEe6D79QHmq15EA" base_Element="_IIJPYJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIJPY5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIJ2cJYTEe6D79QHmq15EA" base_Element="_IIJPZJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIJ2cZYTEe6D79QHmq15EA" base_Element="_IIJPZJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIJ2cpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIJ2dJYTEe6D79QHmq15EA" base_Element="_IIJ2c5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIKdgJYTEe6D79QHmq15EA" base_Element="_IIJ2c5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIKdgZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIKdg5YTEe6D79QHmq15EA" base_Element="_IIKdgpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IILEkJYTEe6D79QHmq15EA" base_Element="_IIKdgpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IILEkZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IILEk5YTEe6D79QHmq15EA" base_Element="_IILEkpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IILroJYTEe6D79QHmq15EA" base_Element="_IILEkpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IILroZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIMSsJYTEe6D79QHmq15EA" base_Element="_IILropYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIMSsZYTEe6D79QHmq15EA" base_Element="_IILropYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIMSspYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIM5wZYTEe6D79QHmq15EA" base_Element="_IIM5wJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIM5wpYTEe6D79QHmq15EA" base_Element="_IIM5wJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIM5w5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIRLMZYTEe6D79QHmq15EA" base_Element="_IIQkIJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIRLMpYTEe6D79QHmq15EA" base_Element="_IIQkIJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIRyQJYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIXR0JYTEe6D79QHmq15EA" base_Element="_IIWqwJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIXR0ZYTEe6D79QHmq15EA" base_Element="_IIWqwJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIXR0pYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIYf8JYTEe6D79QHmq15EA" base_Element="_IIX44JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIYf8ZYTEe6D79QHmq15EA" base_Element="_IIX44JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIZHAJYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIZuEJYTEe6D79QHmq15EA" base_Element="_IIZHAZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIZuEZYTEe6D79QHmq15EA" base_Element="_IIZHAZYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIZuEpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIaVIJYTEe6D79QHmq15EA" base_Element="_IIZuE5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIaVIZYTEe6D79QHmq15EA" base_Element="_IIZuE5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIaVIpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIaVJJYTEe6D79QHmq15EA" base_Element="_IIaVI5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIaVJZYTEe6D79QHmq15EA" base_Element="_IIaVI5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIaVJpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIa8MZYTEe6D79QHmq15EA" base_Element="_IIa8MJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIa8MpYTEe6D79QHmq15EA" base_Element="_IIa8MJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIa8M5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIa8NZYTEe6D79QHmq15EA" base_Element="_IIa8NJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIbjQJYTEe6D79QHmq15EA" base_Element="_IIa8NJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIbjQZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIbjQ5YTEe6D79QHmq15EA" base_Element="_IIbjQpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIbjRJYTEe6D79QHmq15EA" base_Element="_IIbjQpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIbjRZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIcKUJYTEe6D79QHmq15EA" base_Element="_IIbjRpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIcKUZYTEe6D79QHmq15EA" base_Element="_IIbjRpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIcKUpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIcKVJYTEe6D79QHmq15EA" base_Element="_IIcKU5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIcKVZYTEe6D79QHmq15EA" base_Element="_IIcKU5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIcKVpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIcxYZYTEe6D79QHmq15EA" base_Element="_IIcxYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIcxYpYTEe6D79QHmq15EA" base_Element="_IIcxYJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIcxY5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_IIhp4JYTEe6D79QHmq15EA" genericsValue="Town" base_Element="_IIhC0JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIi4AJYTEe6D79QHmq15EA" base_Element="_IIiQ8JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIi4AZYTEe6D79QHmq15EA" base_Element="_IIiQ8JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIi4ApYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIjfEZYTEe6D79QHmq15EA" base_Element="_IIi4A5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIjfEpYTEe6D79QHmq15EA" base_Element="_IIi4A5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIjfE5YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IInwgJYTEe6D79QHmq15EA" base_Element="_IInJcJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IInwgZYTEe6D79QHmq15EA" base_Element="_IInJcJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IInwgpYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIoXlJYTEe6D79QHmq15EA" base_Element="_IIoXkJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIo-oJYTEe6D79QHmq15EA" base_Element="_IIoXkJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIo-oZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIplsZYTEe6D79QHmq15EA" base_Element="_IIo-opYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIplspYTEe6D79QHmq15EA" base_Element="_IIo-opYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIpls5YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIqMwpYTEe6D79QHmq15EA" base_Element="_IIqMwJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIqz0JYTEe6D79QHmq15EA" base_Element="_IIqMwJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIqz0ZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIra45YTEe6D79QHmq15EA" base_Element="_IIra4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIsB8JYTEe6D79QHmq15EA" base_Element="_IIra4JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIsB8ZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IItQEJYTEe6D79QHmq15EA" base_Element="_IIspAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IItQEZYTEe6D79QHmq15EA" base_Element="_IIspAJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IItQEpYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_IIt3IJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_IItQE5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIueMJYTEe6D79QHmq15EA" base_Element="_IItQE5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIueMZYTEe6D79QHmq15EA" base_Element="_IItQE5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIueMpYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIvsUZYTEe6D79QHmq15EA" base_Element="_IIvFQJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIwTYJYTEe6D79QHmq15EA" base_Element="_IIvFQJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIwTYZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIw6cZYTEe6D79QHmq15EA" base_Element="_IIwTYpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIw6cpYTEe6D79QHmq15EA" base_Element="_IIwTYpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIw6c5YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_IIxhgZYTEe6D79QHmq15EA" genericsValue="String" base_Element="_IIxhgJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIyIkJYTEe6D79QHmq15EA" base_Element="_IIxhgJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIyIkZYTEe6D79QHmq15EA" base_Element="_IIxhgJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IIyIkpYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_IIyvoZYTEe6D79QHmq15EA" genericsValue="String" base_Element="_IIyIk5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IIyvopYTEe6D79QHmq15EA" base_Element="_IIyIk5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IIzWsJYTEe6D79QHmq15EA" base_Element="_IIyIk5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IIzWsZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_II6rcJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_II6EZZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_II8goJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_II75k5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_II9uwJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_II9HsJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJALAZYTEe6D79QHmq15EA" base_Element="_IJALAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJAyEJYTEe6D79QHmq15EA" base_Element="_IJALAJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJAyEZYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJBZIJYTEe6D79QHmq15EA" base_Element="_IJAyEpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJBZIZYTEe6D79QHmq15EA" base_Element="_IJAyEpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJBZIpYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJCAMZYTEe6D79QHmq15EA" base_Element="_IJCAMJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJCnQJYTEe6D79QHmq15EA" base_Element="_IJCAMJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJCnQZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJCnQ5YTEe6D79QHmq15EA" base_Element="_IJCnQpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJCnRJYTEe6D79QHmq15EA" base_Element="_IJCnQpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJCnRZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJDOUJYTEe6D79QHmq15EA" base_Element="_IJCnRpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJDOUZYTEe6D79QHmq15EA" base_Element="_IJCnRpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJDOUpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJDOVJYTEe6D79QHmq15EA" base_Element="_IJDOU5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJD1YJYTEe6D79QHmq15EA" base_Element="_IJDOU5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJD1YZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJD1Y5YTEe6D79QHmq15EA" base_Element="_IJD1YpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJD1ZJYTEe6D79QHmq15EA" base_Element="_IJD1YpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJD1ZZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJEccJYTEe6D79QHmq15EA" base_Element="_IJD1ZpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJEccZYTEe6D79QHmq15EA" base_Element="_IJD1ZpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJEccpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJEcdJYTEe6D79QHmq15EA" base_Element="_IJEcc5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJEcdZYTEe6D79QHmq15EA" base_Element="_IJEcc5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJEcdpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJFDgJYTEe6D79QHmq15EA" base_Element="_IJEcd5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJFDgZYTEe6D79QHmq15EA" base_Element="_IJEcd5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJFDgpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJFDhJYTEe6D79QHmq15EA" base_Element="_IJFDg5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJFqkJYTEe6D79QHmq15EA" base_Element="_IJFDg5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJFqkZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJFqk5YTEe6D79QHmq15EA" base_Element="_IJFqkpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJFqlJYTEe6D79QHmq15EA" base_Element="_IJFqkpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJFqlZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJGRoJYTEe6D79QHmq15EA" base_Element="_IJFqlpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJGRoZYTEe6D79QHmq15EA" base_Element="_IJFqlpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJGRopYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJG4sJYTEe6D79QHmq15EA" base_Element="_IJGRo5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJG4sZYTEe6D79QHmq15EA" base_Element="_IJGRo5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJG4spYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJHfwJYTEe6D79QHmq15EA" base_Element="_IJG4s5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJHfwZYTEe6D79QHmq15EA" base_Element="_IJG4s5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJHfwpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJJ8AZYTEe6D79QHmq15EA" base_Element="_IJJ8AJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJKjEJYTEe6D79QHmq15EA" base_Element="_IJJ8AJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJKjEZYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJLKIJYTEe6D79QHmq15EA" base_Element="_IJKjEpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJLKIZYTEe6D79QHmq15EA" base_Element="_IJKjEpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJLKIpYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJMYQJYTEe6D79QHmq15EA" base_Element="_IJLxMJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJMYQZYTEe6D79QHmq15EA" base_Element="_IJLxMJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJMYQpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJONcZYTEe6D79QHmq15EA" base_Element="_IJONcJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJONcpYTEe6D79QHmq15EA" base_Element="_IJONcJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJONc5YTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJO0gZYTEe6D79QHmq15EA" base_Element="_IJO0gJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJO0gpYTEe6D79QHmq15EA" base_Element="_IJO0gJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJO0g5YTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJPbkZYTEe6D79QHmq15EA" base_Element="_IJPbkJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJQCoJYTEe6D79QHmq15EA" base_Element="_IJPbkJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJQCoZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJQCo5YTEe6D79QHmq15EA" base_Element="_IJQCopYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJQCpJYTEe6D79QHmq15EA" base_Element="_IJQCopYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJQCpZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJQpsJYTEe6D79QHmq15EA" base_Element="_IJQCppYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJQpsZYTEe6D79QHmq15EA" base_Element="_IJQCppYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJQpspYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJRQwZYTEe6D79QHmq15EA" base_Element="_IJRQwJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJRQwpYTEe6D79QHmq15EA" base_Element="_IJRQwJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJRQw5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJR30ZYTEe6D79QHmq15EA" base_Element="_IJR30JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJR30pYTEe6D79QHmq15EA" base_Element="_IJR30JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJR305YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJSe4ZYTEe6D79QHmq15EA" base_Element="_IJSe4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJSe4pYTEe6D79QHmq15EA" base_Element="_IJSe4JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJSe45YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJTF8ZYTEe6D79QHmq15EA" base_Element="_IJTF8JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJTF8pYTEe6D79QHmq15EA" base_Element="_IJTF8JYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJTtAJYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJUUEJYTEe6D79QHmq15EA" base_Element="_IJTtAZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJUUEZYTEe6D79QHmq15EA" base_Element="_IJTtAZYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJUUEpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJUUFJYTEe6D79QHmq15EA" base_Element="_IJUUE5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJU7IJYTEe6D79QHmq15EA" base_Element="_IJUUE5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJU7IZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJU7I5YTEe6D79QHmq15EA" base_Element="_IJU7IpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJViMJYTEe6D79QHmq15EA" base_Element="_IJU7IpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJViMZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJViM5YTEe6D79QHmq15EA" base_Element="_IJViMpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJWJQJYTEe6D79QHmq15EA" base_Element="_IJViMpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJWJQZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJWwUJYTEe6D79QHmq15EA" base_Element="_IJWJQpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJWwUZYTEe6D79QHmq15EA" base_Element="_IJWJQpYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJWwUpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJXXYZYTEe6D79QHmq15EA" base_Element="_IJXXYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJXXYpYTEe6D79QHmq15EA" base_Element="_IJXXYJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJXXY5YTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJZMkZYTEe6D79QHmq15EA" base_Element="_IJZMkJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJZzoJYTEe6D79QHmq15EA" base_Element="_IJZMkJYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJZzoZYTEe6D79QHmq15EA" name="Before"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJZzo5YTEe6D79QHmq15EA" base_Element="_IJZzopYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJaasJYTEe6D79QHmq15EA" base_Element="_IJZzopYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJaasZYTEe6D79QHmq15EA" name="After"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJbBwJYTEe6D79QHmq15EA" base_Element="_IJaaspYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJbBwZYTEe6D79QHmq15EA" base_Element="_IJaaspYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJbBwpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJbo0JYTEe6D79QHmq15EA" base_Element="_IJbBw5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJbo0ZYTEe6D79QHmq15EA" base_Element="_IJbBw5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJbo0pYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJcP4JYTEe6D79QHmq15EA" base_Element="_IJbo05YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJcP4ZYTEe6D79QHmq15EA" base_Element="_IJbo05YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJcP4pYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJcP5JYTEe6D79QHmq15EA" base_Element="_IJcP45YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJc28JYTEe6D79QHmq15EA" base_Element="_IJcP45YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJc28ZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJc285YTEe6D79QHmq15EA" base_Element="_IJc28pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJc29JYTEe6D79QHmq15EA" base_Element="_IJc28pYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJc29ZYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJdeAJYTEe6D79QHmq15EA" base_Element="_IJc29pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJdeAZYTEe6D79QHmq15EA" base_Element="_IJc29pYTEe6D79QHmq15EA">
    <annotations xmi:id="_IJdeApYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJeFEJYTEe6D79QHmq15EA" base_Element="_IJdeA5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJeFEZYTEe6D79QHmq15EA" base_Element="_IJdeA5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJeFEpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IJesIJYTEe6D79QHmq15EA" base_Element="_IJeFE5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IJesIZYTEe6D79QHmq15EA" base_Element="_IJeFE5YTEe6D79QHmq15EA">
    <annotations xmi:id="_IJesIpYTEe6D79QHmq15EA" name="Test"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_INGn4JYTEe6D79QHmq15EA" base_Element="_INGA0JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INH2AJYTEe6D79QHmq15EA" base_Element="_INHO8JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INJEIJYTEe6D79QHmq15EA" base_Element="_INH2AZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INJrMJYTEe6D79QHmq15EA" base_Element="_INJEIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INLgYJYTEe6D79QHmq15EA" base_Element="_INK5UJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INLgYpYTEe6D79QHmq15EA" base_Element="_INLgYZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INMugJYTEe6D79QHmq15EA" base_Element="_INMHcJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INNVkJYTEe6D79QHmq15EA" base_Element="_INMugZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INN8oJYTEe6D79QHmq15EA" base_Element="_INNVkZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INN8opYTEe6D79QHmq15EA" base_Element="_INN8oZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INOjsZYTEe6D79QHmq15EA" base_Element="_INOjsJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INPKwJYTEe6D79QHmq15EA" base_Element="_INOjspYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INPx0JYTEe6D79QHmq15EA" base_Element="_INPKwZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INQY4JYTEe6D79QHmq15EA" base_Element="_INPx0ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INQ_8JYTEe6D79QHmq15EA" base_Element="_INQY4ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INRnAJYTEe6D79QHmq15EA" base_Element="_INQ_8ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INS1IJYTEe6D79QHmq15EA" base_Element="_INSOEJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INS1IpYTEe6D79QHmq15EA" base_Element="_INS1IZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INTcMZYTEe6D79QHmq15EA" base_Element="_INTcMJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INUDQJYTEe6D79QHmq15EA" base_Element="_INTcMpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_INXtoJYTEe6D79QHmq15EA" genericsValue="Town, Road" base_Element="_INXGkJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INY7wZYTEe6D79QHmq15EA" base_Element="_INYUsJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INY7wpYTEe6D79QHmq15EA" base_Element="_INYUsJYTEe6D79QHmq15EA">
    <annotations xmi:id="_INZi0JYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INaJ4JYTEe6D79QHmq15EA" base_Element="_INZi0ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INaJ4ZYTEe6D79QHmq15EA" base_Element="_INZi0ZYTEe6D79QHmq15EA">
    <annotations xmi:id="_INaJ4pYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INaw8ZYTEe6D79QHmq15EA" base_Element="_INaJ45YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INaw8pYTEe6D79QHmq15EA" base_Element="_INaJ45YTEe6D79QHmq15EA">
    <annotations xmi:id="_INaw85YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INb_EJYTEe6D79QHmq15EA" base_Element="_INbYAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INb_EZYTEe6D79QHmq15EA" base_Element="_INbYAJYTEe6D79QHmq15EA">
    <annotations xmi:id="_INb_EpYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INcmIpYTEe6D79QHmq15EA" base_Element="_INb_E5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INdNMJYTEe6D79QHmq15EA" base_Element="_INb_E5YTEe6D79QHmq15EA">
    <annotations xmi:id="_INdNMZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INd0QpYTEe6D79QHmq15EA" base_Element="_INdNMpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INebUJYTEe6D79QHmq15EA" base_Element="_INdNMpYTEe6D79QHmq15EA">
    <annotations xmi:id="_INebUZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INfCY5YTEe6D79QHmq15EA" base_Element="_INebUpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INfpcJYTEe6D79QHmq15EA" base_Element="_INebUpYTEe6D79QHmq15EA">
    <annotations xmi:id="_INfpcZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INgQgJYTEe6D79QHmq15EA" base_Element="_INfpcpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INgQgZYTEe6D79QHmq15EA" base_Element="_INfpcpYTEe6D79QHmq15EA">
    <annotations xmi:id="_INgQgpYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INgQhZYTEe6D79QHmq15EA" base_Element="_INgQg5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INg3kJYTEe6D79QHmq15EA" base_Element="_INgQg5YTEe6D79QHmq15EA">
    <annotations xmi:id="_INg3kZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_INheoJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_INg3kpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INheoZYTEe6D79QHmq15EA" base_Element="_INg3kpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INheopYTEe6D79QHmq15EA" base_Element="_INg3kpYTEe6D79QHmq15EA">
    <annotations xmi:id="_INheo5YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_INlwEJYTEe6D79QHmq15EA" base_Element="_INlJAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INm-MJYTEe6D79QHmq15EA" base_Element="_INlwEZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INnlQJYTEe6D79QHmq15EA" base_Element="_INm-MZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INoMUJYTEe6D79QHmq15EA" base_Element="_INnlQZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INozYZYTEe6D79QHmq15EA" base_Element="_INozYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INpacZYTEe6D79QHmq15EA" base_Element="_INpacJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INqBgZYTEe6D79QHmq15EA" base_Element="_INqBgJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_INqokJYTEe6D79QHmq15EA" base_Element="_INqBgpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INvhEZYTEe6D79QHmq15EA" base_Element="_INu6BpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INwIIJYTEe6D79QHmq15EA" base_Element="_INu6BpYTEe6D79QHmq15EA">
    <annotations xmi:id="_INwIIZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_INzyg5YTEe6D79QHmq15EA" base_Element="_INzygJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_INzyhJYTEe6D79QHmq15EA" base_Element="_INzygJYTEe6D79QHmq15EA">
    <annotations xmi:id="_INzyhZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_IN1nsJYTEe6D79QHmq15EA" base_Element="_IN1AoJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IOB08ZYTEe6D79QHmq15EA" base_Element="_IOB08JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOCcAZYTEe6D79QHmq15EA" base_Element="_IOB08pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IOERMJYTEe6D79QHmq15EA" base_Element="_IOB08pYTEe6D79QHmq15EA">
    <annotations xmi:id="_IOERMZYTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_IOJwwZYTEe6D79QHmq15EA" base_Element="_IOJwwJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IOKX0ZYTEe6D79QHmq15EA" base_Element="_IOKX0JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IOQecJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_IOP3YJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IOThwJYTEe6D79QHmq15EA" base_Element="_IOS6sJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IOUI0JYTEe6D79QHmq15EA" genericsValue="Road" base_Element="_IOThwZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IOUv4ZYTEe6D79QHmq15EA" base_Element="_IOUv4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOVW8ZYTEe6D79QHmq15EA" base_Element="_IOUv4pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IOVW8pYTEe6D79QHmq15EA" base_Element="_IOUv4pYTEe6D79QHmq15EA">
    <annotations xmi:id="_IOVW85YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_IOXMIJYTEe6D79QHmq15EA" genericsValue="Town" base_Element="_IOWlEJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOYaQZYTEe6D79QHmq15EA" base_Element="_IOXzMZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Annotations xmi:id="_IOYaQpYTEe6D79QHmq15EA" base_Element="_IOXzMZYTEe6D79QHmq15EA">
    <annotations xmi:id="_IOYaQ5YTEe6D79QHmq15EA" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOgWEJYTEe6D79QHmq15EA" base_Property="_IOfvAJYTEe6D79QHmq15EA" siblings="_IPOHwJYTEe6D79QHmq15EA _IPOu0pYTEe6D79QHmq15EA _IPPV4ZYTEe6D79QHmq15EA _IPPV5JYTEe6D79QHmq15EA _IPPV55YTEe6D79QHmq15EA _IPP88pYTEe6D79QHmq15EA _IPP89ZYTEe6D79QHmq15EA _IPQkAJYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOgWEZYTEe6D79QHmq15EA" base_Element="_IOfvAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOg9IZYTEe6D79QHmq15EA" base_Property="_IOg9IJYTEe6D79QHmq15EA" siblings="_IPQkA5YTEe6D79QHmq15EA _IPRLEpYTEe6D79QHmq15EA _IPRLFZYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOhkMJYTEe6D79QHmq15EA" base_Element="_IOg9IJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOhkMpYTEe6D79QHmq15EA" base_Property="_IOhkMZYTEe6D79QHmq15EA" siblings="_IPRyIZYTEe6D79QHmq15EA _IPRyJJYTEe6D79QHmq15EA _IPSZMJYTEe6D79QHmq15EA _IPSZM5YTEe6D79QHmq15EA _IPSZNpYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOhkM5YTEe6D79QHmq15EA" base_Element="_IOhkMZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOiyUJYTEe6D79QHmq15EA" base_Property="_IOiLQJYTEe6D79QHmq15EA" siblings="_IPTAQpYTEe6D79QHmq15EA _IPTnUpYTEe6D79QHmq15EA _IPTnVZYTEe6D79QHmq15EA _IPUOYpYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOiyUZYTEe6D79QHmq15EA" base_Element="_IOiLQJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOjZYZYTEe6D79QHmq15EA" base_Property="_IOjZYJYTEe6D79QHmq15EA" siblings="_IPUOZZYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOkAcJYTEe6D79QHmq15EA" base_Element="_IOjZYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOkngJYTEe6D79QHmq15EA" base_Property="_IOkAcZYTEe6D79QHmq15EA" siblings="_IPU1cZYTEe6D79QHmq15EA _IPU1dJYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOkngZYTEe6D79QHmq15EA" base_Element="_IOkAcZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOlOkJYTEe6D79QHmq15EA" base_Property="_IOkngpYTEe6D79QHmq15EA" siblings="_IPVcgpYTEe6D79QHmq15EA _IPVchZYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOlOkZYTEe6D79QHmq15EA" base_Element="_IOkngpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IOmcsJYTEe6D79QHmq15EA" genericsValue="String" base_Element="_IOl1oJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOmcsZYTEe6D79QHmq15EA" base_Property="_IOl1oJYTEe6D79QHmq15EA" siblings="_IPWDkpYTEe6D79QHmq15EA _IPWDlZYTEe6D79QHmq15EA _IPWqopYTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOnDwJYTEe6D79QHmq15EA" base_Element="_IOl1oJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IOnDwpYTEe6D79QHmq15EA" base_Property="_IOnDwZYTEe6D79QHmq15EA" siblings="_IPXRsJYTEe6D79QHmq15EA _IPXRs5YTEe6D79QHmq15EA" root="true"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOnq0JYTEe6D79QHmq15EA" base_Element="_IOnDwZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOnq0pYTEe6D79QHmq15EA" base_Element="_IOnq0ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOoR4JYTEe6D79QHmq15EA" base_Element="_IOnq05YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOpgAZYTEe6D79QHmq15EA" base_Element="_IOo48JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOqHEJYTEe6D79QHmq15EA" base_Element="_IOpgApYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOqHEpYTEe6D79QHmq15EA" base_Element="_IOqHEZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOrVMJYTEe6D79QHmq15EA" base_Element="_IOquIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IOtKYJYTEe6D79QHmq15EA" genericsValue="Town,Road" base_Element="_IOr8QJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOtKYZYTEe6D79QHmq15EA" base_Element="_IOr8QJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Array xmi:id="_IOtxcZYTEe6D79QHmq15EA" base_Element="_IOtKYpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOtxcpYTEe6D79QHmq15EA" base_Element="_IOtKYpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IOu_kJYTEe6D79QHmq15EA" genericsValue="Town,Road" base_Element="_IOuYgJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOvmoJYTEe6D79QHmq15EA" base_Element="_IOuYgJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Array xmi:id="_IOwNsJYTEe6D79QHmq15EA" base_Element="_IOvmoZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOw0wJYTEe6D79QHmq15EA" base_Element="_IOvmoZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IOxb0JYTEe6D79QHmq15EA" genericsValue="Town,Road" base_Element="_IOw0wZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOxb0ZYTEe6D79QHmq15EA" base_Element="_IOw0wZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Array xmi:id="_IOyC4pYTEe6D79QHmq15EA" base_Element="_IOyC4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOyC45YTEe6D79QHmq15EA" base_Element="_IOyC4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOyp8ZYTEe6D79QHmq15EA" base_Element="_IOyp8JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOzRAZYTEe6D79QHmq15EA" base_Element="_IOzRAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IOz4EZYTEe6D79QHmq15EA" base_Element="_IOz4EJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO0fIJYTEe6D79QHmq15EA" base_Element="_IOz4EpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO0fIpYTEe6D79QHmq15EA" base_Element="_IO0fIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO0fJJYTEe6D79QHmq15EA" base_Element="_IO0fI5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO1GMJYTEe6D79QHmq15EA" base_Element="_IO0fJZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Generics xmi:id="_IO1tQZYTEe6D79QHmq15EA" genericsValue="Town" base_Element="_IO1tQJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO1tQpYTEe6D79QHmq15EA" base_Element="_IO1tQJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO2UUZYTEe6D79QHmq15EA" base_Element="_IO2UUJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO3icZYTEe6D79QHmq15EA" base_Element="_IO3icJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Array xmi:id="_IO4JgJYTEe6D79QHmq15EA" dimensions="1" base_Element="_IO3icpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO4JgZYTEe6D79QHmq15EA" base_Element="_IO3icpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO4wkZYTEe6D79QHmq15EA" base_Element="_IO4wkJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Array xmi:id="_IO5XopYTEe6D79QHmq15EA" dimensions="1" base_Element="_IO5XoJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO5Xo5YTEe6D79QHmq15EA" base_Element="_IO5XoJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO5-sZYTEe6D79QHmq15EA" base_Element="_IO5-sJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Array xmi:id="_IO6lwZYTEe6D79QHmq15EA" base_Element="_IO5-spYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO6lwpYTEe6D79QHmq15EA" base_Element="_IO5-spYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO7M0ZYTEe6D79QHmq15EA" base_Element="_IO7M0JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IO7M05YTEe6D79QHmq15EA" base_Element="_IO7M0pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPOu0JYTEe6D79QHmq15EA" base_Property="_IPOHwJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPOu0ZYTEe6D79QHmq15EA" base_Element="_IPOHwJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPOu05YTEe6D79QHmq15EA" base_Property="_IPOu0pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPPV4JYTEe6D79QHmq15EA" base_Element="_IPOu0pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPPV4pYTEe6D79QHmq15EA" base_Property="_IPPV4ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPPV45YTEe6D79QHmq15EA" base_Element="_IPPV4ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPPV5ZYTEe6D79QHmq15EA" base_Property="_IPPV5JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPPV5pYTEe6D79QHmq15EA" base_Element="_IPPV5JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPP88JYTEe6D79QHmq15EA" base_Property="_IPPV55YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPP88ZYTEe6D79QHmq15EA" base_Element="_IPPV55YTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPP885YTEe6D79QHmq15EA" base_Property="_IPP88pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPP89JYTEe6D79QHmq15EA" base_Element="_IPP88pYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPP89pYTEe6D79QHmq15EA" base_Property="_IPP89ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPP895YTEe6D79QHmq15EA" base_Element="_IPP89ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPQkAZYTEe6D79QHmq15EA" base_Property="_IPQkAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPQkApYTEe6D79QHmq15EA" base_Element="_IPQkAJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPRLEJYTEe6D79QHmq15EA" base_Property="_IPQkA5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPRLEZYTEe6D79QHmq15EA" base_Element="_IPQkA5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPRLE5YTEe6D79QHmq15EA" base_Property="_IPRLEpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPRLFJYTEe6D79QHmq15EA" base_Element="_IPRLEpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPRLFpYTEe6D79QHmq15EA" base_Property="_IPRLFZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPRyIJYTEe6D79QHmq15EA" base_Element="_IPRLFZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPRyIpYTEe6D79QHmq15EA" base_Property="_IPRyIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPRyI5YTEe6D79QHmq15EA" base_Element="_IPRyIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPRyJZYTEe6D79QHmq15EA" base_Property="_IPRyJJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPRyJpYTEe6D79QHmq15EA" base_Element="_IPRyJJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPSZMZYTEe6D79QHmq15EA" base_Property="_IPSZMJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPSZMpYTEe6D79QHmq15EA" base_Element="_IPSZMJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPSZNJYTEe6D79QHmq15EA" base_Property="_IPSZM5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPSZNZYTEe6D79QHmq15EA" base_Element="_IPSZM5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPTAQJYTEe6D79QHmq15EA" base_Property="_IPSZNpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPTAQZYTEe6D79QHmq15EA" base_Element="_IPSZNpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPTnUJYTEe6D79QHmq15EA" base_Property="_IPTAQpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPTnUZYTEe6D79QHmq15EA" base_Element="_IPTAQpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPTnU5YTEe6D79QHmq15EA" base_Property="_IPTnUpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPTnVJYTEe6D79QHmq15EA" base_Element="_IPTnUpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPUOYJYTEe6D79QHmq15EA" base_Property="_IPTnVZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPUOYZYTEe6D79QHmq15EA" base_Element="_IPTnVZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPUOY5YTEe6D79QHmq15EA" base_Property="_IPUOYpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPUOZJYTEe6D79QHmq15EA" base_Element="_IPUOYpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPUOZpYTEe6D79QHmq15EA" base_Property="_IPUOZZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPU1cJYTEe6D79QHmq15EA" base_Element="_IPUOZZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPU1cpYTEe6D79QHmq15EA" base_Property="_IPU1cZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPU1c5YTEe6D79QHmq15EA" base_Element="_IPU1cZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPVcgJYTEe6D79QHmq15EA" base_Property="_IPU1dJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPVcgZYTEe6D79QHmq15EA" base_Element="_IPU1dJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPVcg5YTEe6D79QHmq15EA" base_Property="_IPVcgpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPVchJYTEe6D79QHmq15EA" base_Element="_IPVcgpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPWDkJYTEe6D79QHmq15EA" base_Property="_IPVchZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPWDkZYTEe6D79QHmq15EA" base_Element="_IPVchZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPWDk5YTEe6D79QHmq15EA" base_Property="_IPWDkpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPWDlJYTEe6D79QHmq15EA" base_Element="_IPWDkpYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPWqoJYTEe6D79QHmq15EA" base_Property="_IPWDlZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPWqoZYTEe6D79QHmq15EA" base_Element="_IPWDlZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPWqo5YTEe6D79QHmq15EA" base_Property="_IPWqopYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPWqpJYTEe6D79QHmq15EA" base_Element="_IPWqopYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPXRsZYTEe6D79QHmq15EA" base_Property="_IPXRsJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPXRspYTEe6D79QHmq15EA" base_Element="_IPXRsJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_IPXRtJYTEe6D79QHmq15EA" base_Property="_IPXRs5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_IPX4wJYTEe6D79QHmq15EA" base_Element="_IPXRs5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPje8JYTEe6D79QHmq15EA" base_Element="_IPi34JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPkGAJYTEe6D79QHmq15EA" base_Element="_IPje8ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPkGA5YTEe6D79QHmq15EA" base_Element="_IPkGAZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPktEJYTEe6D79QHmq15EA" base_Element="_IPkGBJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPlUIJYTEe6D79QHmq15EA" base_Element="_IPktEZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPlUI5YTEe6D79QHmq15EA" base_Element="_IPlUIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPl7MpYTEe6D79QHmq15EA" base_Element="_IPl7MJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPmiQJYTEe6D79QHmq15EA" base_Element="_IPl7M5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPnJUJYTEe6D79QHmq15EA" base_Element="_IPmiQZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPnJU5YTEe6D79QHmq15EA" base_Element="_IPnJUZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPnwYpYTEe6D79QHmq15EA" base_Element="_IPnwYJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPoXcJYTEe6D79QHmq15EA" base_Element="_IPnwY5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPo-gJYTEe6D79QHmq15EA" base_Element="_IPoXcZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPplkJYTEe6D79QHmq15EA" base_Element="_IPo-gZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPplk5YTEe6D79QHmq15EA" base_Element="_IPplkZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPqMopYTEe6D79QHmq15EA" base_Element="_IPqMoJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPqzsJYTEe6D79QHmq15EA" base_Element="_IPqMo5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPrawJYTEe6D79QHmq15EA" base_Element="_IPqzsZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPsB0JYTEe6D79QHmq15EA" base_Element="_IPrawZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPso4JYTEe6D79QHmq15EA" base_Element="_IPsB0ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPtP8JYTEe6D79QHmq15EA" base_Element="_IPso4ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPt3AJYTEe6D79QHmq15EA" base_Element="_IPtP8ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPueEJYTEe6D79QHmq15EA" base_Element="_IPt3AZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPueE5YTEe6D79QHmq15EA" base_Element="_IPueEZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPvFIJYTEe6D79QHmq15EA" base_Element="_IPueFJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPvsMJYTEe6D79QHmq15EA" base_Element="_IPvFIZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPvsM5YTEe6D79QHmq15EA" base_Element="_IPvsMZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPwTQJYTEe6D79QHmq15EA" base_Element="_IPvsNJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPw6UJYTEe6D79QHmq15EA" base_Element="_IPwTQZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPxhYJYTEe6D79QHmq15EA" base_Element="_IPw6UZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPxhY5YTEe6D79QHmq15EA" base_Element="_IPxhYZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPyIcJYTEe6D79QHmq15EA" base_Element="_IPxhZJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPyvgJYTEe6D79QHmq15EA" base_Element="_IPyIcZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPyvg5YTEe6D79QHmq15EA" base_Element="_IPyvgZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPzWkJYTEe6D79QHmq15EA" base_Element="_IPyvhJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPz9oJYTEe6D79QHmq15EA" base_Element="_IPzWkZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IPz9o5YTEe6D79QHmq15EA" base_Element="_IPz9oZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP0kspYTEe6D79QHmq15EA" base_Element="_IP0ksJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP1LwJYTEe6D79QHmq15EA" base_Element="_IP0ks5YTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP1y0JYTEe6D79QHmq15EA" base_Element="_IP1LwZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP2Z4JYTEe6D79QHmq15EA" base_Element="_IP1y0ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP3A8JYTEe6D79QHmq15EA" base_Element="_IP2Z4ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP3oAJYTEe6D79QHmq15EA" base_Element="_IP3A8ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP4PEJYTEe6D79QHmq15EA" base_Element="_IP3oAZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP42IJYTEe6D79QHmq15EA" base_Element="_IP4PEZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP42I5YTEe6D79QHmq15EA" base_Element="_IP42IZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP5dMJYTEe6D79QHmq15EA" base_Element="_IP42JJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP6EQJYTEe6D79QHmq15EA" base_Element="_IP5dMZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP6EQ5YTEe6D79QHmq15EA" base_Element="_IP6EQZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP6rUJYTEe6D79QHmq15EA" base_Element="_IP6ERJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP7SYJYTEe6D79QHmq15EA" base_Element="_IP6rUZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP75cJYTEe6D79QHmq15EA" base_Element="_IP7SYZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP75c5YTEe6D79QHmq15EA" base_Element="_IP75cZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP8ggJYTEe6D79QHmq15EA" base_Element="_IP75dJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP9HkJYTEe6D79QHmq15EA" base_Element="_IP8ggZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP9Hk5YTEe6D79QHmq15EA" base_Element="_IP9HkZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP9uoJYTEe6D79QHmq15EA" base_Element="_IP9HlJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP-VsJYTEe6D79QHmq15EA" base_Element="_IP9uoZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP-Vs5YTEe6D79QHmq15EA" base_Element="_IP-VsZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP_j0JYTEe6D79QHmq15EA" base_Element="_IP-8wJYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IP_j05YTEe6D79QHmq15EA" base_Element="_IP_j0ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IQAx8JYTEe6D79QHmq15EA" base_Element="_IQAK4JYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IQBZAJYTEe6D79QHmq15EA" base_Element="_IQAx8ZYTEe6D79QHmq15EA"/>
  <UMLLabProfile:Reference xmi:id="_IQCAEJYTEe6D79QHmq15EA" base_Element="_IQBZAZYTEe6D79QHmq15EA"/>
</xmi:XMI>
